/* automatically generated by rust-bindgen 0.57.0 */

pub const __BIONIC__: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __bos_level: u32 = 0;
pub const __ANDROID_API_FUTURE__: u32 = 10000;
pub const __ANDROID_API__: u32 = 10000;
pub const __ANDROID_API_G__: u32 = 9;
pub const __ANDROID_API_I__: u32 = 14;
pub const __ANDROID_API_J__: u32 = 16;
pub const __ANDROID_API_J_MR1__: u32 = 17;
pub const __ANDROID_API_J_MR2__: u32 = 18;
pub const __ANDROID_API_K__: u32 = 19;
pub const __ANDROID_API_L__: u32 = 21;
pub const __ANDROID_API_L_MR1__: u32 = 22;
pub const __ANDROID_API_M__: u32 = 23;
pub const __ANDROID_API_N__: u32 = 24;
pub const __ANDROID_API_N_MR1__: u32 = 25;
pub const __ANDROID_API_O__: u32 = 26;
pub const __ANDROID_API_O_MR1__: u32 = 27;
pub const __ANDROID_API_P__: u32 = 28;
pub const __ANDROID_API_Q__: u32 = 29;
pub const __ANDROID_API_R__: u32 = 30;
pub const __ANDROID_API_S__: u32 = 31;
pub const __ANDROID_NDK__: u32 = 1;
pub const __NDK_MAJOR__: u32 = 23;
pub const __NDK_MINOR__: u32 = 0;
pub const __NDK_BETA__: u32 = 1;
pub const __NDK_BUILD__: u32 = 7123448;
pub const __NDK_CANARY__: u32 = 0;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const P_ALL: u32 = 0;
pub const P_PID: u32 = 1;
pub const P_PGID: u32 = 2;
pub const P_PIDFD: u32 = 3;
pub const WCHAR_MIN: u8 = 0u8;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const __GNUC_VA_LIST: u32 = 1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 4096;
pub const L_tmpnam: u32 = 4096;
pub const TMP_MAX: u32 = 308915776;
pub const P_tmpdir: &'static [u8; 6usize] = b"/tmp/\0";
pub const L_ctermid: u32 = 1024;
pub const STRUCT_MALLINFO_DECLARED: u32 = 1;
pub const M_DECAY_TIME: i32 = -100;
pub const M_PURGE: i32 = -101;
pub const M_THREAD_DISABLE_MEM_INIT: i32 = -103;
pub const M_CACHE_COUNT_MAX: i32 = -200;
pub const M_CACHE_SIZE_MAX: i32 = -201;
pub const M_TSDS_COUNT_MAX: i32 = -202;
pub const M_BIONIC_ZERO_INIT: i32 = -203;
pub const M_BIONIC_SET_HEAP_TAGGING_LEVEL: i32 = -204;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const ORT_API_VERSION: u32 = 7;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_old_dev_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub flags: u32,
    pub stack_base: *mut ::std::os::raw::c_void,
    pub stack_size: size_t,
    pub guard_size: size_t,
    pub sched_policy: i32,
    pub sched_priority: i32,
    pub __reserved: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).stack_base as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stack_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).stack_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).guard_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(guard_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).sched_policy as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(sched_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).sched_priority as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(sched_priority)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_t {
    pub __private: [i64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_barrierattr_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t {
    pub __private: [i32; 12usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_condattr_t = ::std::os::raw::c_long;
pub type pthread_key_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t {
    pub __private: [i32; 10usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_mutexattr_t = ::std::os::raw::c_long;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __private: [i32; 14usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_rwlockattr_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock_t {
    pub __private: i64,
}
#[test]
fn bindgen_test_layout_pthread_spinlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_spinlock_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_spinlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_spinlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_spinlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_spinlock_t>())).__private as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_spinlock_t),
            "::",
            stringify!(__private)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_long;
pub type __gid_t = __kernel_gid32_t;
pub type gid_t = __gid_t;
pub type __uid_t = __kernel_uid32_t;
pub type uid_t = __uid_t;
pub type __pid_t = __kernel_pid_t;
pub type pid_t = __pid_t;
pub type __id_t = u32;
pub type id_t = __id_t;
pub type blkcnt_t = ::std::os::raw::c_ulong;
pub type blksize_t = ::std::os::raw::c_ulong;
pub type caddr_t = __kernel_caddr_t;
pub type clock_t = __kernel_clock_t;
pub type __clockid_t = __kernel_clockid_t;
pub type clockid_t = __clockid_t;
pub type daddr_t = __kernel_daddr_t;
pub type fsblkcnt_t = ::std::os::raw::c_ulong;
pub type fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __mode_t = __kernel_mode_t;
pub type mode_t = __mode_t;
pub type __key_t = __kernel_key_t;
pub type key_t = __key_t;
pub type __ino_t = __kernel_ino_t;
pub type ino_t = __ino_t;
pub type ino64_t = u64;
pub type __nlink_t = u32;
pub type nlink_t = __nlink_t;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type timer_t = __timer_t;
pub type __suseconds_t = __kernel_suseconds_t;
pub type suseconds_t = __suseconds_t;
pub type __useconds_t = u32;
pub type useconds_t = __useconds_t;
pub type dev_t = u64;
pub type __time_t = __kernel_time_t;
pub type time_t = __time_t;
pub type off_t = i64;
pub type loff_t = off_t;
pub type off64_t = loff_t;
pub type __socklen_t = u32;
pub type socklen_t = __socklen_t;
pub type ssize_t = __kernel_ssize_t;
pub type uint_t = ::std::os::raw::c_uint;
pub type uint = ::std::os::raw::c_uint;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type u_int32_t = u32;
pub type u_int16_t = u16;
pub type u_int8_t = u8;
pub type u_int64_t = u64;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type fpos_t = off_t;
pub type fpos64_t = off64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    _unused: [u8; 0],
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo {
    #[doc = " Total number of non-mmapped bytes currently allocated from OS."]
    pub arena: size_t,
    #[doc = " Number of free chunks."]
    pub ordblks: size_t,
    #[doc = " (Unused.)"]
    pub smblks: size_t,
    #[doc = " (Unused.)"]
    pub hblks: size_t,
    #[doc = " Total number of bytes in mmapped regions."]
    pub hblkhd: size_t,
    #[doc = " Maximum total allocated space; greater than total if trimming has occurred."]
    pub usmblks: size_t,
    #[doc = " (Unused.)"]
    pub fsmblks: size_t,
    #[doc = " Total allocated space (normal or mmapped.)"]
    pub uordblks: size_t,
    #[doc = " Total free space."]
    pub fordblks: size_t,
    #[doc = " Upper bound on number of bytes releasable by a trim operation."]
    pub keepcost: size_t,
}
#[test]
fn bindgen_test_layout_mallinfo() {
    assert_eq!(
        ::std::mem::size_of::<mallinfo>(),
        80usize,
        concat!("Size of: ", stringify!(mallinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<mallinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(mallinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).arena as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).ordblks as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(ordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).smblks as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(smblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).hblks as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).hblkhd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(hblkhd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).usmblks as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(usmblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).fsmblks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fsmblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).uordblks as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(uordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).fordblks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(fordblks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mallinfo>())).keepcost as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mallinfo),
            "::",
            stringify!(keepcost)
        )
    );
}
#[repr(u32)]
#[doc = " Constants for use with the M_BIONIC_SET_HEAP_TAGGING_LEVEL mallopt() option."]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum HeapTaggingLevel {
    #[doc = " Disable heap tagging and memory tag checks (if supported)."]
    #[doc = " Heap tagging may not be re-enabled after being disabled."]
    M_HEAP_TAGGING_LEVEL_NONE = 0,
    #[doc = " Address-only tagging. Heap pointers have a non-zero tag in the"]
    #[doc = " most significant (\"top\") byte which is checked in free(). Memory"]
    #[doc = " accesses ignore the tag using arm64's Top Byte Ignore (TBI) feature."]
    M_HEAP_TAGGING_LEVEL_TBI = 1,
    #[doc = " Enable heap tagging and asynchronous memory tag checks (if supported)."]
    #[doc = " Disable stack trace collection."]
    M_HEAP_TAGGING_LEVEL_ASYNC = 2,
    #[doc = " Enable heap tagging and synchronous memory tag checks (if supported)."]
    #[doc = " Enable stack trace collection."]
    M_HEAP_TAGGING_LEVEL_SYNC = 3,
}
extern "C" {
    pub static mut __malloc_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut __realloc_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut __free_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __caller: *const ::std::os::raw::c_void,
        ),
    >;
}
extern "C" {
    pub static mut __memalign_hook: ::std::option::Option<
        unsafe extern "C" fn(
            __alignment: size_t,
            __byte_count: size_t,
            __caller: *const ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void,
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
#[doc = " The `locale_t` type that represents a locale."]
pub type locale_t = *mut __locale_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXTensorElementDataType {
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UNDEFINED = 0,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT = 1,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT8 = 2,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT8 = 3,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT16 = 4,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT16 = 5,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT32 = 6,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_INT64 = 7,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_STRING = 8,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BOOL = 9,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_FLOAT16 = 10,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_DOUBLE = 11,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT32 = 12,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_UINT64 = 13,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX64 = 14,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_COMPLEX128 = 15,
    ONNX_TENSOR_ELEMENT_DATA_TYPE_BFLOAT16 = 16,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ONNXType {
    ONNX_TYPE_UNKNOWN = 0,
    ONNX_TYPE_TENSOR = 1,
    ONNX_TYPE_SEQUENCE = 2,
    ONNX_TYPE_MAP = 3,
    ONNX_TYPE_OPAQUE = 4,
    ONNX_TYPE_SPARSETENSOR = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLoggingLevel {
    ORT_LOGGING_LEVEL_VERBOSE = 0,
    ORT_LOGGING_LEVEL_INFO = 1,
    ORT_LOGGING_LEVEL_WARNING = 2,
    ORT_LOGGING_LEVEL_ERROR = 3,
    ORT_LOGGING_LEVEL_FATAL = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtErrorCode {
    ORT_OK = 0,
    ORT_FAIL = 1,
    ORT_INVALID_ARGUMENT = 2,
    ORT_NO_SUCHFILE = 3,
    ORT_NO_MODEL = 4,
    ORT_ENGINE_ERROR = 5,
    ORT_RUNTIME_EXCEPTION = 6,
    ORT_INVALID_PROTOBUF = 7,
    ORT_MODEL_LOADED = 8,
    ORT_NOT_IMPLEMENTED = 9,
    ORT_INVALID_GRAPH = 10,
    ORT_EP_FAIL = 11,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtEnv {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMemoryInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtIoBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSession {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtValue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtRunOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorTypeAndShapeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSessionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOpDomain {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtMapTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtSequenceTypeInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtModelMetadata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadPoolParams {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtThreadingOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtArenaCfg {
    _unused: [u8; 0],
}
pub type OrtStatusPtr = *mut OrtStatus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtAllocator {
    pub version: u32,
    pub Alloc: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, size: size_t) -> *mut ::std::os::raw::c_void,
    >,
    pub Free: ::std::option::Option<
        unsafe extern "C" fn(this_: *mut OrtAllocator, p: *mut ::std::os::raw::c_void),
    >,
    pub Info: ::std::option::Option<
        unsafe extern "C" fn(this_: *const OrtAllocator) -> *const OrtMemoryInfo,
    >,
}
#[test]
fn bindgen_test_layout_OrtAllocator() {
    assert_eq!(
        ::std::mem::size_of::<OrtAllocator>(),
        32usize,
        concat!("Size of: ", stringify!(OrtAllocator))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtAllocator>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtAllocator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtAllocator>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtAllocator),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtAllocator>())).Alloc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtAllocator),
            "::",
            stringify!(Alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtAllocator>())).Free as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtAllocator),
            "::",
            stringify!(Free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtAllocator>())).Info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtAllocator),
            "::",
            stringify!(Info)
        )
    );
}
pub type OrtLoggingFunction = ::std::option::Option<
    unsafe extern "C" fn(
        param: *mut ::std::os::raw::c_void,
        severity: OrtLoggingLevel,
        category: *const ::std::os::raw::c_char,
        logid: *const ::std::os::raw::c_char,
        code_location: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ),
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GraphOptimizationLevel {
    ORT_DISABLE_ALL = 0,
    ORT_ENABLE_BASIC = 1,
    ORT_ENABLE_EXTENDED = 2,
    ORT_ENABLE_ALL = 99,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ExecutionMode {
    ORT_SEQUENTIAL = 0,
    ORT_PARALLEL = 1,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtLanguageProjection {
    ORT_PROJECTION_C = 0,
    ORT_PROJECTION_CPLUSPLUS = 1,
    ORT_PROJECTION_CSHARP = 2,
    ORT_PROJECTION_PYTHON = 3,
    ORT_PROJECTION_JAVA = 4,
    ORT_PROJECTION_WINML = 5,
    ORT_PROJECTION_NODEJS = 6,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelInfo {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtKernelContext {
    _unused: [u8; 0],
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtAllocatorType {
    Invalid = -1,
    OrtDeviceAllocator = 0,
    OrtArenaAllocator = 1,
}
impl OrtMemType {
    pub const OrtMemTypeCPU: OrtMemType = OrtMemType::OrtMemTypeCPUOutput;
}
#[repr(i32)]
#[doc = " memory types for allocator, exec provider specific types should be extended in each provider"]
#[doc = " Whenever this struct is updated, please also update the MakeKey function in onnxruntime/core/framework/execution_provider.cc"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtMemType {
    OrtMemTypeCPUInput = -2,
    OrtMemTypeCPUOutput = -1,
    OrtMemTypeDefault = 0,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum OrtCudnnConvAlgoSearch {
    EXHAUSTIVE = 0,
    HEURISTIC = 1,
    DEFAULT = 2,
}
#[doc = " <summary>"]
#[doc = " Options for the CUDA provider that are passed to SessionOptionsAppendExecutionProvider_CUDA"]
#[doc = " </summary>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCUDAProviderOptions {
    pub device_id: ::std::os::raw::c_int,
    pub cudnn_conv_algo_search: OrtCudnnConvAlgoSearch,
    pub cuda_mem_limit: size_t,
    pub arena_extend_strategy: ::std::os::raw::c_int,
    pub do_copy_in_default_stream: ::std::os::raw::c_int,
    pub has_user_compute_stream: ::std::os::raw::c_int,
    pub user_compute_stream: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_OrtCUDAProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtCUDAProviderOptions>(),
        40usize,
        concat!("Size of: ", stringify!(OrtCUDAProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCUDAProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCUDAProviderOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).device_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).cudnn_conv_algo_search as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(cudnn_conv_algo_search)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).cuda_mem_limit as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(cuda_mem_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).arena_extend_strategy as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(arena_extend_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).do_copy_in_default_stream as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(do_copy_in_default_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).has_user_compute_stream as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(has_user_compute_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCUDAProviderOptions>())).user_compute_stream as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCUDAProviderOptions),
            "::",
            stringify!(user_compute_stream)
        )
    );
}
#[doc = " <summary>"]
#[doc = " Options for the TensorRT provider that are passed to SessionOptionsAppendExecutionProvider_TensorRT"]
#[doc = " </summary>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtTensorRTProviderOptions {
    pub device_id: ::std::os::raw::c_int,
    pub has_user_compute_stream: ::std::os::raw::c_int,
    pub user_compute_stream: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_OrtTensorRTProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtTensorRTProviderOptions>(),
        16usize,
        concat!("Size of: ", stringify!(OrtTensorRTProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtTensorRTProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtTensorRTProviderOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtTensorRTProviderOptions>())).device_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtTensorRTProviderOptions),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtTensorRTProviderOptions>())).has_user_compute_stream
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtTensorRTProviderOptions),
            "::",
            stringify!(has_user_compute_stream)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtTensorRTProviderOptions>())).user_compute_stream as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtTensorRTProviderOptions),
            "::",
            stringify!(user_compute_stream)
        )
    );
}
#[doc = " <summary>"]
#[doc = " Options for the OpenVINO provider that are passed to SessionOptionsAppendExecutionProvider_OpenVINO"]
#[doc = " </summary>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtOpenVINOProviderOptions {
    pub device_type: *const ::std::os::raw::c_char,
    pub enable_vpu_fast_compile: ::std::os::raw::c_uchar,
    pub device_id: *const ::std::os::raw::c_char,
    pub num_of_threads: size_t,
}
#[test]
fn bindgen_test_layout_OrtOpenVINOProviderOptions() {
    assert_eq!(
        ::std::mem::size_of::<OrtOpenVINOProviderOptions>(),
        32usize,
        concat!("Size of: ", stringify!(OrtOpenVINOProviderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtOpenVINOProviderOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtOpenVINOProviderOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtOpenVINOProviderOptions>())).device_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtOpenVINOProviderOptions),
            "::",
            stringify!(device_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtOpenVINOProviderOptions>())).enable_vpu_fast_compile
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtOpenVINOProviderOptions),
            "::",
            stringify!(enable_vpu_fast_compile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtOpenVINOProviderOptions>())).device_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtOpenVINOProviderOptions),
            "::",
            stringify!(device_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtOpenVINOProviderOptions>())).num_of_threads as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtOpenVINOProviderOptions),
            "::",
            stringify!(num_of_threads)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApiBase {
    pub GetApi: ::std::option::Option<unsafe extern "C" fn(version: u32) -> *const OrtApi>,
    pub GetVersionString:
        ::std::option::Option<unsafe extern "C" fn() -> *const ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_OrtApiBase() {
    assert_eq!(
        ::std::mem::size_of::<OrtApiBase>(),
        16usize,
        concat!("Size of: ", stringify!(OrtApiBase))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApiBase>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApiBase))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApiBase>())).GetApi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApiBase),
            "::",
            stringify!(GetApi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApiBase>())).GetVersionString as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApiBase),
            "::",
            stringify!(GetVersionString)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtApi {
    #[doc = " \\param msg A null-terminated string. Its content will be copied into the newly created OrtStatus"]
    pub CreateStatus: ::std::option::Option<
        unsafe extern "C" fn(
            code: OrtErrorCode,
            msg: *const ::std::os::raw::c_char,
        ) -> *mut OrtStatus,
    >,
    pub GetErrorCode:
        ::std::option::Option<unsafe extern "C" fn(status: *const OrtStatus) -> OrtErrorCode>,
    #[doc = " \\param status must not be NULL"]
    #[doc = " \\return The error message inside the `status`. Do not free the returned value."]
    pub GetErrorMessage: ::std::option::Option<
        unsafe extern "C" fn(status: *const OrtStatus) -> *const ::std::os::raw::c_char,
    >,
    pub CreateEnv: ::std::option::Option<
        unsafe extern "C" fn(
            logging_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLogger: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            logging_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub EnableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub DisableTelemetryEvents:
        ::std::option::Option<unsafe extern "C" fn(env: *const OrtEnv) -> OrtStatusPtr>,
    pub CreateSession: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_path: *const ::std::os::raw::c_char,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionFromArray: ::std::option::Option<
        unsafe extern "C" fn(
            env: *const OrtEnv,
            model_data: *const ::std::os::raw::c_void,
            model_data_length: size_t,
            options: *const OrtSessionOptions,
            out: *mut *mut OrtSession,
        ) -> OrtStatusPtr,
    >,
    pub Run: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut OrtSession,
            run_options: *const OrtRunOptions,
            input_names: *const *const ::std::os::raw::c_char,
            input: *const *const OrtValue,
            input_len: size_t,
            output_names1: *const *const ::std::os::raw::c_char,
            output_names_len: size_t,
            output: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(options: *mut *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetOptimizedModelFilePath: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            optimized_model_filepath: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CloneSessionOptions: ::std::option::Option<
        unsafe extern "C" fn(
            in_options: *const OrtSessionOptions,
            out_options: *mut *mut OrtSessionOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionExecutionMode: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            execution_mode: ExecutionMode,
        ) -> OrtStatusPtr,
    >,
    pub EnableProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            profile_file_prefix: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub DisableProfiling: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableMemPattern: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub EnableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub DisableCpuMemArena: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub SetSessionLogId: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            logid: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_verbosity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            session_log_severity_level: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetSessionGraphOptimizationLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            graph_optimization_level: GraphOptimizationLevel,
        ) -> OrtStatusPtr,
    >,
    pub SetIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub CreateCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            domain: *const ::std::os::raw::c_char,
            out: *mut *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub CustomOpDomain_Add: ::std::option::Option<
        unsafe extern "C" fn(
            custom_op_domain: *mut OrtCustomOpDomain,
            op: *const OrtCustomOp,
        ) -> OrtStatusPtr,
    >,
    pub AddCustomOpDomain: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            custom_op_domain: *mut OrtCustomOpDomain,
        ) -> OrtStatusPtr,
    >,
    pub RegisterCustomOpsLibrary: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            library_path: *const ::std::os::raw::c_char,
            library_handle: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputCount: ::std::option::Option<
        unsafe extern "C" fn(sess: *const OrtSession, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub SessionGetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(sess: *const OrtSession, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerCount: ::std::option::Option<
        unsafe extern "C" fn(sess: *const OrtSession, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub SessionGetInputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetInputName: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOutputName: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetOverridableInitializerName: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            index: size_t,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateRunOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsSetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            value: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtRunOptions,
            value: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut OrtRunOptions,
            run_tag: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogVerbosityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunLogSeverityLevel: ::std::option::Option<
        unsafe extern "C" fn(
            options: *const OrtRunOptions,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsGetRunTag: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const OrtRunOptions,
            out: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub RunOptionsSetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub RunOptionsUnsetTerminate:
        ::std::option::Option<unsafe extern "C" fn(options: *mut OrtRunOptions) -> OrtStatusPtr>,
    pub CreateTensorAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            allocator: *mut OrtAllocator,
            shape: *const i64,
            shape_len: size_t,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateTensorWithDataAsOrtValue: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtMemoryInfo,
            p_data: *mut ::std::os::raw::c_void,
            p_data_len: size_t,
            shape: *const i64,
            shape_len: size_t,
            type_: ONNXTensorElementDataType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub IsTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorMutableData: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensor: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const *const ::std::os::raw::c_char,
            s_len: size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorDataLength: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, len: *mut size_t) -> OrtStatusPtr,
    >,
    pub GetStringTensorContent: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s: *mut ::std::os::raw::c_void,
            s_len: size_t,
            offsets: *mut size_t,
            offsets_len: size_t,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToTensorInfo: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const OrtTypeInfo,
            out: *mut *const OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetOnnxTypeFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const OrtTypeInfo, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateTensorTypeAndShapeInfo: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtTensorTypeAndShapeInfo) -> OrtStatusPtr,
    >,
    pub SetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut OrtTensorTypeAndShapeInfo,
            type_: ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub SetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *mut OrtTensorTypeAndShapeInfo,
            dim_values: *const i64,
            dim_count: size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorElementType: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const OrtTensorTypeAndShapeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensionsCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_values: *mut i64,
            dim_values_length: size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetSymbolicDimensions: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            dim_params: *mut *const ::std::os::raw::c_char,
            dim_params_length: size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorShapeElementCount: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtTensorTypeAndShapeInfo,
            out: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetTensorTypeAndShape: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            out: *mut *mut OrtTensorTypeAndShapeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut *mut OrtTypeInfo) -> OrtStatusPtr,
    >,
    pub GetValueType: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut ONNXType) -> OrtStatusPtr,
    >,
    pub CreateMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            name1: *const ::std::os::raw::c_char,
            type_: OrtAllocatorType,
            id1: ::std::os::raw::c_int,
            mem_type1: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CreateCpuMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_: OrtAllocatorType,
            mem_type1: OrtMemType,
            out: *mut *mut OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub CompareMemoryInfo: ::std::option::Option<
        unsafe extern "C" fn(
            info1: *const OrtMemoryInfo,
            info2: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetName: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetId: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtMemoryInfo,
            out: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetMemType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtMemType) -> OrtStatusPtr,
    >,
    pub MemoryInfoGetType: ::std::option::Option<
        unsafe extern "C" fn(ptr: *const OrtMemoryInfo, out: *mut OrtAllocatorType) -> OrtStatusPtr,
    >,
    pub AllocatorAlloc: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut OrtAllocator,
            size: size_t,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorFree: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut OrtAllocator,
            p: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub AllocatorGetInfo: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *const OrtAllocator,
            out: *mut *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetAllocatorWithDefaultOptions:
        ::std::option::Option<unsafe extern "C" fn(out: *mut *mut OrtAllocator) -> OrtStatusPtr>,
    pub AddFreeDimensionOverride: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_denotation: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetValue: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            index: ::std::os::raw::c_int,
            allocator: *mut OrtAllocator,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetValueCount: ::std::option::Option<
        unsafe extern "C" fn(value: *const OrtValue, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub CreateValue: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const *const OrtValue,
            num_values: size_t,
            value_type: ONNXType,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            data_container: *const ::std::os::raw::c_void,
            data_container_size: size_t,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub GetOpaqueValue: ::std::option::Option<
        unsafe extern "C" fn(
            domain_name: *const ::std::os::raw::c_char,
            type_name: *const ::std::os::raw::c_char,
            in_: *const OrtValue,
            data_container: *mut ::std::os::raw::c_void,
            data_container_size: size_t,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_float: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut f32,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_int64: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub KernelInfoGetAttribute_string: ::std::option::Option<
        unsafe extern "C" fn(
            info: *const OrtKernelInfo,
            name: *const ::std::os::raw::c_char,
            out: *mut ::std::os::raw::c_char,
            size: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutputCount: ::std::option::Option<
        unsafe extern "C" fn(context: *const OrtKernelContext, out: *mut size_t) -> OrtStatusPtr,
    >,
    pub KernelContext_GetInput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *const OrtKernelContext,
            index: size_t,
            out: *mut *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub KernelContext_GetOutput: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut OrtKernelContext,
            index: size_t,
            dim_values: *const i64,
            dim_count: size_t,
            out: *mut *mut OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseEnv: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtEnv)>,
    pub ReleaseStatus: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtStatus)>,
    pub ReleaseMemoryInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMemoryInfo)>,
    pub ReleaseSession: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSession)>,
    pub ReleaseValue: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtValue)>,
    pub ReleaseRunOptions: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtRunOptions)>,
    pub ReleaseTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTypeInfo)>,
    pub ReleaseTensorTypeAndShapeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtTensorTypeAndShapeInfo)>,
    pub ReleaseSessionOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSessionOptions)>,
    pub ReleaseCustomOpDomain:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtCustomOpDomain)>,
    pub GetDenotationFromTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const OrtTypeInfo,
            denotation: *mut *const ::std::os::raw::c_char,
            len: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToMapTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtMapTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub CastTypeInfoToSequenceTypeInfo: ::std::option::Option<
        unsafe extern "C" fn(
            type_info: *const OrtTypeInfo,
            out: *mut *const OrtSequenceTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetMapKeyType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            out: *mut ONNXTensorElementDataType,
        ) -> OrtStatusPtr,
    >,
    pub GetMapValueType: ::std::option::Option<
        unsafe extern "C" fn(
            map_type_info: *const OrtMapTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetSequenceElementType: ::std::option::Option<
        unsafe extern "C" fn(
            sequence_type_info: *const OrtSequenceTypeInfo,
            type_info: *mut *mut OrtTypeInfo,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseMapTypeInfo: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtMapTypeInfo)>,
    pub ReleaseSequenceTypeInfo:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtSequenceTypeInfo)>,
    pub SessionEndProfiling: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut OrtSession,
            allocator: *mut OrtAllocator,
            out: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetModelMetadata: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            out: *mut *mut OrtModelMetadata,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetProducerName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetGraphName: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDomain: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataLookupCustomMetadataMap: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            key: *const ::std::os::raw::c_char,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub ModelMetadataGetVersion: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            value: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseModelMetadata:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtModelMetadata)>,
    pub CreateEnvWithGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            logging_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            t_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub DisablePerSessionThreads: ::std::option::Option<
        unsafe extern "C" fn(options: *mut OrtSessionOptions) -> OrtStatusPtr,
    >,
    pub CreateThreadingOptions: ::std::option::Option<
        unsafe extern "C" fn(out: *mut *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub ReleaseThreadingOptions:
        ::std::option::Option<unsafe extern "C" fn(input: *mut OrtThreadingOptions)>,
    pub ModelMetadataGetCustomMetadataMapKeys: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            keys: *mut *mut *mut ::std::os::raw::c_char,
            num_keys: *mut i64,
        ) -> OrtStatusPtr,
    >,
    pub AddFreeDimensionOverrideByName: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            dim_name: *const ::std::os::raw::c_char,
            dim_value: i64,
        ) -> OrtStatusPtr,
    >,
    pub GetAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            out_ptr: *mut *mut *mut ::std::os::raw::c_char,
            provider_length: *mut ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAvailableProviders: ::std::option::Option<
        unsafe extern "C" fn(
            ptr: *mut *mut ::std::os::raw::c_char,
            providers_length: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorElementLength: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            index: size_t,
            out: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *const OrtValue,
            s_len: size_t,
            index: size_t,
            s: *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub FillStringTensorElement: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            s: *const ::std::os::raw::c_char,
            index: size_t,
        ) -> OrtStatusPtr,
    >,
    pub AddSessionConfigEntry: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            config_key: *const ::std::os::raw::c_char,
            config_value: *const ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub CreateAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *const OrtSession,
            mem_info: *const OrtMemoryInfo,
            out: *mut *mut OrtAllocator,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseAllocator: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtAllocator)>,
    pub RunWithBinding: ::std::option::Option<
        unsafe extern "C" fn(
            sess: *mut OrtSession,
            run_options: *const OrtRunOptions,
            binding_ptr: *const OrtIoBinding,
        ) -> OrtStatusPtr,
    >,
    pub CreateIoBinding: ::std::option::Option<
        unsafe extern "C" fn(sess: *mut OrtSession, out: *mut *mut OrtIoBinding) -> OrtStatusPtr,
    >,
    pub ReleaseIoBinding: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtIoBinding)>,
    pub BindInput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutput: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub BindOutputToDevice: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *mut OrtIoBinding,
            name: *const ::std::os::raw::c_char,
            val_ptr: *const OrtMemoryInfo,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputNames: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            buffer: *mut *mut ::std::os::raw::c_char,
            lengths: *mut *mut size_t,
            count: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    pub GetBoundOutputValues: ::std::option::Option<
        unsafe extern "C" fn(
            binding_ptr: *const OrtIoBinding,
            allocator: *mut OrtAllocator,
            output: *mut *mut *mut OrtValue,
            output_count: *mut size_t,
        ) -> OrtStatusPtr,
    >,
    #[doc = " Clears any previously specified bindings for inputs/outputs"]
    pub ClearBoundInputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    pub ClearBoundOutputs:
        ::std::option::Option<unsafe extern "C" fn(binding_ptr: *mut OrtIoBinding)>,
    pub TensorAt: ::std::option::Option<
        unsafe extern "C" fn(
            value: *mut OrtValue,
            location_values: *const i64,
            location_values_count: size_t,
            out: *mut *mut ::std::os::raw::c_void,
        ) -> OrtStatusPtr,
    >,
    pub CreateAndRegisterAllocator: ::std::option::Option<
        unsafe extern "C" fn(
            env: *mut OrtEnv,
            mem_info: *const OrtMemoryInfo,
            arena_cfg: *const OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub SetLanguageProjection: ::std::option::Option<
        unsafe extern "C" fn(
            ort_env: *const OrtEnv,
            projection: OrtLanguageProjection,
        ) -> OrtStatusPtr,
    >,
    pub SessionGetProfilingStartTimeNs: ::std::option::Option<
        unsafe extern "C" fn(sess: *const OrtSession, out: *mut u64) -> OrtStatusPtr,
    >,
    pub SetGlobalIntraOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            intra_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalInterOpNumThreads: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            inter_op_num_threads: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalSpinControl: ::std::option::Option<
        unsafe extern "C" fn(
            tp_options: *mut OrtThreadingOptions,
            allow_spinning: ::std::os::raw::c_int,
        ) -> OrtStatusPtr,
    >,
    pub AddInitializer: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            name: *const ::std::os::raw::c_char,
            val: *const OrtValue,
        ) -> OrtStatusPtr,
    >,
    pub CreateEnvWithCustomLoggerAndGlobalThreadPools: ::std::option::Option<
        unsafe extern "C" fn(
            logging_function: OrtLoggingFunction,
            logger_param: *mut ::std::os::raw::c_void,
            logging_level: OrtLoggingLevel,
            logid: *const ::std::os::raw::c_char,
            tp_options: *const OrtThreadingOptions,
            out: *mut *mut OrtEnv,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_CUDA: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            cuda_options: *const OrtCUDAProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_OpenVINO: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            provider_options: *const OrtOpenVINOProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetGlobalDenormalAsZero: ::std::option::Option<
        unsafe extern "C" fn(tp_options: *mut OrtThreadingOptions) -> OrtStatusPtr,
    >,
    pub CreateArenaCfg: ::std::option::Option<
        unsafe extern "C" fn(
            max_mem: size_t,
            arena_extend_strategy: ::std::os::raw::c_int,
            initial_chunk_size_bytes: ::std::os::raw::c_int,
            max_dead_bytes_per_chunk: ::std::os::raw::c_int,
            out: *mut *mut OrtArenaCfg,
        ) -> OrtStatusPtr,
    >,
    pub ReleaseArenaCfg: ::std::option::Option<unsafe extern "C" fn(input: *mut OrtArenaCfg)>,
    pub ModelMetadataGetGraphDescription: ::std::option::Option<
        unsafe extern "C" fn(
            model_metadata: *const OrtModelMetadata,
            allocator: *mut OrtAllocator,
            value: *mut *mut ::std::os::raw::c_char,
        ) -> OrtStatusPtr,
    >,
    pub SessionOptionsAppendExecutionProvider_TensorRT: ::std::option::Option<
        unsafe extern "C" fn(
            options: *mut OrtSessionOptions,
            tensorrt_options: *const OrtTensorRTProviderOptions,
        ) -> OrtStatusPtr,
    >,
    pub SetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
    pub GetCurrentGpuDeviceId: ::std::option::Option<
        unsafe extern "C" fn(device_id: *mut ::std::os::raw::c_int) -> OrtStatusPtr,
    >,
}
#[test]
fn bindgen_test_layout_OrtApi() {
    assert_eq!(
        ::std::mem::size_of::<OrtApi>(),
        1288usize,
        concat!("Size of: ", stringify!(OrtApi))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtApi>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtApi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateStatus as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetErrorCode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetErrorCode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetErrorMessage as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetErrorMessage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateEnv as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateEnv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateEnvWithCustomLogger as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateEnvWithCustomLogger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).EnableTelemetryEvents as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(EnableTelemetryEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).DisableTelemetryEvents as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(DisableTelemetryEvents)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateSession as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateSession)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateSessionFromArray as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateSessionFromArray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).Run as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(Run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateSessionOptions as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateSessionOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetOptimizedModelFilePath as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetOptimizedModelFilePath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CloneSessionOptions as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CloneSessionOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetSessionExecutionMode as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetSessionExecutionMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).EnableProfiling as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(EnableProfiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).DisableProfiling as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(DisableProfiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).EnableMemPattern as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(EnableMemPattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).DisableMemPattern as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(DisableMemPattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).EnableCpuMemArena as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(EnableCpuMemArena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).DisableCpuMemArena as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(DisableCpuMemArena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetSessionLogId as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetSessionLogId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetSessionLogVerbosityLevel as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetSessionLogVerbosityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetSessionLogSeverityLevel as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetSessionLogSeverityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetSessionGraphOptimizationLevel as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetSessionGraphOptimizationLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetIntraOpNumThreads as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetIntraOpNumThreads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetInterOpNumThreads as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetInterOpNumThreads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateCustomOpDomain as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateCustomOpDomain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CustomOpDomain_Add as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CustomOpDomain_Add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AddCustomOpDomain as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AddCustomOpDomain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RegisterCustomOpsLibrary as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RegisterCustomOpsLibrary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetInputCount as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetInputCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetOutputCount as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOutputCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionGetOverridableInitializerCount as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOverridableInitializerCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetInputTypeInfo as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetInputTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetOutputTypeInfo as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOutputTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionGetOverridableInitializerTypeInfo as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOverridableInitializerTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetInputName as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetInputName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetOutputName as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOutputName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionGetOverridableInitializerName as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetOverridableInitializerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateRunOptions as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateRunOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).RunOptionsSetRunLogVerbosityLevel as *const _
                as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsSetRunLogVerbosityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).RunOptionsSetRunLogSeverityLevel as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsSetRunLogSeverityLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RunOptionsSetRunTag as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsSetRunTag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).RunOptionsGetRunLogVerbosityLevel as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsGetRunLogVerbosityLevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).RunOptionsGetRunLogSeverityLevel as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsGetRunLogSeverityLevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RunOptionsGetRunTag as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsGetRunTag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RunOptionsSetTerminate as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsSetTerminate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RunOptionsUnsetTerminate as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunOptionsUnsetTerminate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateTensorAsOrtValue as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateTensorAsOrtValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateTensorWithDataAsOrtValue as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateTensorWithDataAsOrtValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).IsTensor as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(IsTensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetTensorMutableData as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetTensorMutableData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).FillStringTensor as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(FillStringTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).GetStringTensorDataLength as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetStringTensorDataLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetStringTensorContent as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetStringTensorContent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CastTypeInfoToTensorInfo as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CastTypeInfoToTensorInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetOnnxTypeFromTypeInfo as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetOnnxTypeFromTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateTensorTypeAndShapeInfo as *const _ as usize
        },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateTensorTypeAndShapeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetTensorElementType as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetTensorElementType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetDimensions as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetDimensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetTensorElementType as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetTensorElementType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetDimensionsCount as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetDimensionsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetDimensions as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetDimensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetSymbolicDimensions as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetSymbolicDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).GetTensorShapeElementCount as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetTensorShapeElementCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetTensorTypeAndShape as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetTensorTypeAndShape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetTypeInfo as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetValueType as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetValueType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateMemoryInfo as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateMemoryInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateCpuMemoryInfo as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateCpuMemoryInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CompareMemoryInfo as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CompareMemoryInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).MemoryInfoGetName as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(MemoryInfoGetName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).MemoryInfoGetId as *const _ as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(MemoryInfoGetId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).MemoryInfoGetMemType as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(MemoryInfoGetMemType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).MemoryInfoGetType as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(MemoryInfoGetType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AllocatorAlloc as *const _ as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AllocatorAlloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AllocatorFree as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AllocatorFree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AllocatorGetInfo as *const _ as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AllocatorGetInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).GetAllocatorWithDefaultOptions as *const _ as usize
        },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetAllocatorWithDefaultOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AddFreeDimensionOverride as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AddFreeDimensionOverride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetValue as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetValueCount as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetValueCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateValue as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateOpaqueValue as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateOpaqueValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetOpaqueValue as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetOpaqueValue)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).KernelInfoGetAttribute_float as *const _ as usize
        },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelInfoGetAttribute_float)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).KernelInfoGetAttribute_int64 as *const _ as usize
        },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelInfoGetAttribute_int64)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).KernelInfoGetAttribute_string as *const _ as usize
        },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelInfoGetAttribute_string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).KernelContext_GetInputCount as *const _ as usize
        },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelContext_GetInputCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).KernelContext_GetOutputCount as *const _ as usize
        },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelContext_GetOutputCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).KernelContext_GetInput as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelContext_GetInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).KernelContext_GetOutput as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(KernelContext_GetOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseEnv as *const _ as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseEnv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseStatus as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseStatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseMemoryInfo as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseMemoryInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseSession as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseSession)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseValue as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseValue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseRunOptions as *const _ as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseRunOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseTypeInfo as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ReleaseTensorTypeAndShapeInfo as *const _ as usize
        },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseTensorTypeAndShapeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseSessionOptions as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseSessionOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseCustomOpDomain as *const _ as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseCustomOpDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).GetDenotationFromTypeInfo as *const _ as usize
        },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetDenotationFromTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CastTypeInfoToMapTypeInfo as *const _ as usize
        },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CastTypeInfoToMapTypeInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CastTypeInfoToSequenceTypeInfo as *const _ as usize
        },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CastTypeInfoToSequenceTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetMapKeyType as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetMapKeyType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetMapValueType as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetMapValueType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetSequenceElementType as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetSequenceElementType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseMapTypeInfo as *const _ as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseMapTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseSequenceTypeInfo as *const _ as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseSequenceTypeInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionEndProfiling as *const _ as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionEndProfiling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SessionGetModelMetadata as *const _ as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetModelMetadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetProducerName as *const _ as usize
        },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetProducerName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetGraphName as *const _ as usize
        },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetGraphName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetDomain as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetDomain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetDescription as *const _ as usize
        },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataLookupCustomMetadataMap as *const _
                as usize
        },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataLookupCustomMetadataMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetVersion as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseModelMetadata as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseModelMetadata)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateEnvWithGlobalThreadPools as *const _ as usize
        },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateEnvWithGlobalThreadPools)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).DisablePerSessionThreads as *const _ as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(DisablePerSessionThreads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateThreadingOptions as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateThreadingOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseThreadingOptions as *const _ as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseThreadingOptions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetCustomMetadataMapKeys as *const _
                as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetCustomMetadataMapKeys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).AddFreeDimensionOverrideByName as *const _ as usize
        },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AddFreeDimensionOverrideByName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetAvailableProviders as *const _ as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetAvailableProviders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ReleaseAvailableProviders as *const _ as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseAvailableProviders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).GetStringTensorElementLength as *const _ as usize
        },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetStringTensorElementLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetStringTensorElement as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetStringTensorElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).FillStringTensorElement as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(FillStringTensorElement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AddSessionConfigEntry as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AddSessionConfigEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateAllocator as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateAllocator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseAllocator as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseAllocator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).RunWithBinding as *const _ as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(RunWithBinding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateIoBinding as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateIoBinding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseIoBinding as *const _ as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseIoBinding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).BindInput as *const _ as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(BindInput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).BindOutput as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(BindOutput)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).BindOutputToDevice as *const _ as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(BindOutputToDevice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetBoundOutputNames as *const _ as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetBoundOutputNames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetBoundOutputValues as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetBoundOutputValues)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ClearBoundInputs as *const _ as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ClearBoundInputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ClearBoundOutputs as *const _ as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ClearBoundOutputs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).TensorAt as *const _ as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(TensorAt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateAndRegisterAllocator as *const _ as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateAndRegisterAllocator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetLanguageProjection as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetLanguageProjection)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionGetProfilingStartTimeNs as *const _ as usize
        },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionGetProfilingStartTimeNs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetGlobalIntraOpNumThreads as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetGlobalIntraOpNumThreads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SetGlobalInterOpNumThreads as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetGlobalInterOpNumThreads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetGlobalSpinControl as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetGlobalSpinControl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).AddInitializer as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(AddInitializer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).CreateEnvWithCustomLoggerAndGlobalThreadPools
                as *const _ as usize
        },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateEnvWithCustomLoggerAndGlobalThreadPools)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionOptionsAppendExecutionProvider_CUDA
                as *const _ as usize
        },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionOptionsAppendExecutionProvider_CUDA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionOptionsAppendExecutionProvider_OpenVINO
                as *const _ as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionOptionsAppendExecutionProvider_OpenVINO)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetGlobalDenormalAsZero as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetGlobalDenormalAsZero)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).CreateArenaCfg as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(CreateArenaCfg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).ReleaseArenaCfg as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ReleaseArenaCfg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).ModelMetadataGetGraphDescription as *const _ as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(ModelMetadataGetGraphDescription)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtApi>())).SessionOptionsAppendExecutionProvider_TensorRT
                as *const _ as usize
        },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SessionOptionsAppendExecutionProvider_TensorRT)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).SetCurrentGpuDeviceId as *const _ as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(SetCurrentGpuDeviceId)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtApi>())).GetCurrentGpuDeviceId as *const _ as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtApi),
            "::",
            stringify!(GetCurrentGpuDeviceId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrtCustomOp {
    pub version: u32,
    pub CreateKernel: ::std::option::Option<
        unsafe extern "C" fn(
            op: *const OrtCustomOp,
            api: *const OrtApi,
            info: *const OrtKernelInfo,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub GetName: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetExecutionProviderType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp) -> *const ::std::os::raw::c_char,
    >,
    pub GetInputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: size_t) -> ONNXTensorElementDataType,
    >,
    pub GetInputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> size_t>,
    pub GetOutputType: ::std::option::Option<
        unsafe extern "C" fn(op: *const OrtCustomOp, index: size_t) -> ONNXTensorElementDataType,
    >,
    pub GetOutputTypeCount:
        ::std::option::Option<unsafe extern "C" fn(op: *const OrtCustomOp) -> size_t>,
    pub KernelCompute: ::std::option::Option<
        unsafe extern "C" fn(
            op_kernel: *mut ::std::os::raw::c_void,
            context: *mut OrtKernelContext,
        ),
    >,
    pub KernelDestroy:
        ::std::option::Option<unsafe extern "C" fn(op_kernel: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_OrtCustomOp() {
    assert_eq!(
        ::std::mem::size_of::<OrtCustomOp>(),
        80usize,
        concat!("Size of: ", stringify!(OrtCustomOp))
    );
    assert_eq!(
        ::std::mem::align_of::<OrtCustomOp>(),
        8usize,
        concat!("Alignment of ", stringify!(OrtCustomOp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).CreateKernel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(CreateKernel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).GetName as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetName)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<OrtCustomOp>())).GetExecutionProviderType as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetExecutionProviderType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).GetInputType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetInputType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).GetInputTypeCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetInputTypeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).GetOutputType as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetOutputType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).GetOutputTypeCount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(GetOutputTypeCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).KernelCompute as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(KernelCompute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrtCustomOp>())).KernelDestroy as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OrtCustomOp),
            "::",
            stringify!(KernelDestroy)
        )
    );
}
pub type __builtin_va_list = __va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list {
    pub __stack: *mut ::std::os::raw::c_void,
    pub __gr_top: *mut ::std::os::raw::c_void,
    pub __vr_top: *mut ::std::os::raw::c_void,
    pub __gr_offs: ::std::os::raw::c_int,
    pub __vr_offs: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___va_list() {
    assert_eq!(
        ::std::mem::size_of::<__va_list>(),
        32usize,
        concat!("Size of: ", stringify!(__va_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__gr_top as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__gr_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__vr_top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__vr_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__gr_offs as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__gr_offs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list>())).__vr_offs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list),
            "::",
            stringify!(__vr_offs)
        )
    );
}
extern crate libloading;
pub struct OnnxRuntime {
    __library: ::libloading::Library,
    pub android_get_application_target_sdk_version:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub android_get_device_api_level:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub clearerr: Result<unsafe extern "C" fn(__fp: *mut FILE), ::libloading::Error>,
    pub fclose:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub feof:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ferror:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fflush:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fgetc:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fgets: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: ::std::os::raw::c_int,
            __fp: *mut FILE,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fprintf: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputc: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fputs: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __fp: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fread: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __count: ::std::os::raw::c_ulong,
            __fp: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub fscanf: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fwrite: Result<
        unsafe extern "C" fn(
            __buf: *const ::std::os::raw::c_void,
            __size: ::std::os::raw::c_ulong,
            __count: ::std::os::raw::c_ulong,
            __fp: *mut FILE,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub getc:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getchar: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getdelim: Result<
        unsafe extern "C" fn(
            __line_ptr: *mut *mut ::std::os::raw::c_char,
            __line_length_ptr: *mut size_t,
            __delimiter: ::std::os::raw::c_int,
            __fp: *mut FILE,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub getline: Result<
        unsafe extern "C" fn(
            __line_ptr: *mut *mut ::std::os::raw::c_char,
            __line_length_ptr: *mut size_t,
            __fp: *mut FILE,
        ) -> ssize_t,
        ::libloading::Error,
    >,
    pub perror:
        Result<unsafe extern "C" fn(__msg: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub printf: Result<
        unsafe extern "C" fn(__fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putc: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub puts: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub remove: Result<
        unsafe extern "C" fn(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub rewind: Result<unsafe extern "C" fn(__fp: *mut FILE), ::libloading::Error>,
    pub scanf: Result<
        unsafe extern "C" fn(__fmt: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setbuf: Result<
        unsafe extern "C" fn(__fp: *mut FILE, __buf: *mut ::std::os::raw::c_char),
        ::libloading::Error,
    >,
    pub setvbuf: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __mode: ::std::os::raw::c_int,
            __size: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ungetc: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfprintf: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vprintf: Result<
        unsafe extern "C" fn(
            __fp: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub dprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vdprintf: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __fmt: *const ::std::os::raw::c_char,
            __args: va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub sprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsprintf: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub tmpnam: Result<
        unsafe extern "C" fn(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub tempnam: Result<
        unsafe extern "C" fn(
            __dir: *const ::std::os::raw::c_char,
            __prefix: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub rename: Result<
        unsafe extern "C" fn(
            __old_path: *const ::std::os::raw::c_char,
            __new_path: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub renameat: Result<
        unsafe extern "C" fn(
            __old_dir_fd: ::std::os::raw::c_int,
            __old_path: *const ::std::os::raw::c_char,
            __new_dir_fd: ::std::os::raw::c_int,
            __new_path: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fseek: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __offset: ::std::os::raw::c_long,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftell: Result<
        unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub fgetpos: Result<
        unsafe extern "C" fn(__fp: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fsetpos: Result<
        unsafe extern "C" fn(__fp: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fseeko: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __offset: off_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftello: Result<unsafe extern "C" fn(__fp: *mut FILE) -> off_t, ::libloading::Error>,
    pub fgetpos64: Result<
        unsafe extern "C" fn(__fp: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fsetpos64: Result<
        unsafe extern "C" fn(__fp: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fseeko64: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __offset: off64_t,
            __whence: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ftello64: Result<unsafe extern "C" fn(__fp: *mut FILE) -> off64_t, ::libloading::Error>,
    pub fopen: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fopen64: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub freopen: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: *const ::std::os::raw::c_char,
            __fp: *mut FILE,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub freopen64: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __mode: *const ::std::os::raw::c_char,
            __fp: *mut FILE,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub tmpfile: Result<unsafe extern "C" fn() -> *mut FILE, ::libloading::Error>,
    pub tmpfile64: Result<unsafe extern "C" fn() -> *mut FILE, ::libloading::Error>,
    pub snprintf: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: ::std::os::raw::c_ulong,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vfscanf: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vscanf: Result<
        unsafe extern "C" fn(
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsnprintf: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_char,
            __size: ::std::os::raw::c_ulong,
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub vsscanf: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __args: __builtin_va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ctermid: Result<
        unsafe extern "C" fn(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fdopen: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub fileno:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub pclose:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub popen: Result<
        unsafe extern "C" fn(
            __command: *const ::std::os::raw::c_char,
            __mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub flockfile: Result<unsafe extern "C" fn(__fp: *mut FILE), ::libloading::Error>,
    pub ftrylockfile:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub funlockfile: Result<unsafe extern "C" fn(__fp: *mut FILE), ::libloading::Error>,
    pub getc_unlocked:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub getchar_unlocked:
        Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub putc_unlocked: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int, __fp: *mut FILE) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub putchar_unlocked: Result<
        unsafe extern "C" fn(__ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fmemopen: Result<
        unsafe extern "C" fn(
            __buf: *mut ::std::os::raw::c_void,
            __size: size_t,
            __mode: *const ::std::os::raw::c_char,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub open_memstream: Result<
        unsafe extern "C" fn(
            __ptr: *mut *mut ::std::os::raw::c_char,
            __size_ptr: *mut size_t,
        ) -> *mut FILE,
        ::libloading::Error,
    >,
    pub asprintf: Result<
        unsafe extern "C" fn(
            __s_ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            ...
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub fgetln: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __length_ptr: *mut size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub fpurge:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub setbuffer: Result<
        unsafe extern "C" fn(
            __fp: *mut FILE,
            __buf: *mut ::std::os::raw::c_char,
            __size: ::std::os::raw::c_int,
        ),
        ::libloading::Error,
    >,
    pub setlinebuf:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub vasprintf: Result<
        unsafe extern "C" fn(
            __s_ptr: *mut *mut ::std::os::raw::c_char,
            __fmt: *const ::std::os::raw::c_char,
            __args: va_list,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearerr_unlocked: Result<unsafe extern "C" fn(__fp: *mut FILE), ::libloading::Error>,
    pub feof_unlocked:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ferror_unlocked:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub fileno_unlocked:
        Result<unsafe extern "C" fn(__fp: *mut FILE) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub malloc: Result<
        unsafe extern "C" fn(__byte_count: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub calloc: Result<
        unsafe extern "C" fn(
            __item_count: ::std::os::raw::c_ulong,
            __item_size: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub realloc: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __byte_count: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub reallocarray: Result<
        unsafe extern "C" fn(
            __ptr: *mut ::std::os::raw::c_void,
            __item_count: size_t,
            __item_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub free: Result<unsafe extern "C" fn(__ptr: *mut ::std::os::raw::c_void), ::libloading::Error>,
    pub memalign: Result<
        unsafe extern "C" fn(
            __alignment: size_t,
            __byte_count: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub malloc_usable_size: Result<
        unsafe extern "C" fn(__ptr: *const ::std::os::raw::c_void) -> size_t,
        ::libloading::Error,
    >,
    pub mallinfo: Result<unsafe extern "C" fn() -> mallinfo, ::libloading::Error>,
    pub malloc_info: Result<
        unsafe extern "C" fn(
            __must_be_zero: ::std::os::raw::c_int,
            __fp: *mut FILE,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mallopt: Result<
        unsafe extern "C" fn(
            __option: ::std::os::raw::c_int,
            __value: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub abort: Result<unsafe extern "C" fn(), ::libloading::Error>,
    pub exit: Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub _Exit: Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub atexit: Result<
        unsafe extern "C" fn(
            __fn: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub at_quick_exit: Result<
        unsafe extern "C" fn(
            __fn: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub quick_exit:
        Result<unsafe extern "C" fn(__status: ::std::os::raw::c_int), ::libloading::Error>,
    pub getenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub putenv: Result<
        unsafe extern "C" fn(__assignment: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub setenv: Result<
        unsafe extern "C" fn(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __overwrite: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unsetenv: Result<
        unsafe extern "C" fn(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub clearenv: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub mkdtemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mktemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub mkostemp64: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkostemp: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkostemps64: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __suffix_length: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkostemps: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __suffix_length: ::std::os::raw::c_int,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemp64: Result<
        unsafe extern "C" fn(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemp: Result<
        unsafe extern "C" fn(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemps64: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mkstemps: Result<
        unsafe extern "C" fn(
            __template: *mut ::std::os::raw::c_char,
            __flags: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strtol: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strtoll: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoul: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strtoull: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub posix_memalign: Result<
        unsafe extern "C" fn(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: size_t,
            __size: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub aligned_alloc: Result<
        unsafe extern "C" fn(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strtod: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtold: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> u128,
        ::libloading::Error,
    >,
    pub strtoul_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub atoi: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub atol: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub atoll: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub realpath: Result<
        unsafe extern "C" fn(
            __path: *const ::std::os::raw::c_char,
            __resolved: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub system: Result<
        unsafe extern "C" fn(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub bsearch: Result<
        unsafe extern "C" fn(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nmemb: size_t,
            __size: size_t,
            __comparator: ::std::option::Option<
                unsafe extern "C" fn(
                    __lhs: *const ::std::os::raw::c_void,
                    __rhs: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub qsort: Result<
        unsafe extern "C" fn(
            __base: *mut ::std::os::raw::c_void,
            __nmemb: size_t,
            __size: size_t,
            __comparator: ::std::option::Option<
                unsafe extern "C" fn(
                    __lhs: *const ::std::os::raw::c_void,
                    __rhs: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ),
        ::libloading::Error,
    >,
    pub arc4random: Result<unsafe extern "C" fn() -> u32, ::libloading::Error>,
    pub arc4random_uniform:
        Result<unsafe extern "C" fn(__upper_bound: u32) -> u32, ::libloading::Error>,
    pub arc4random_buf: Result<
        unsafe extern "C" fn(__buf: *mut ::std::os::raw::c_void, __n: size_t),
        ::libloading::Error,
    >,
    pub rand_r: Result<
        unsafe extern "C" fn(__seed_ptr: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub drand48: Result<unsafe extern "C" fn() -> f64, ::libloading::Error>,
    pub erand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> f64,
        ::libloading::Error,
    >,
    pub jrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub lcong48:
        Result<unsafe extern "C" fn(__param: *mut ::std::os::raw::c_ushort), ::libloading::Error>,
    pub lrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub mrand48: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub nrand48: Result<
        unsafe extern "C" fn(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub seed48: Result<
        unsafe extern "C" fn(
            __seed16v: *mut ::std::os::raw::c_ushort,
        ) -> *mut ::std::os::raw::c_ushort,
        ::libloading::Error,
    >,
    pub srand48: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_long), ::libloading::Error>,
    pub initstate: Result<
        unsafe extern "C" fn(
            __seed: ::std::os::raw::c_uint,
            __state: *mut ::std::os::raw::c_char,
            __n: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub setstate: Result<
        unsafe extern "C" fn(__state: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub getpt: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub posix_openpt: Result<
        unsafe extern "C" fn(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ptsname: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub ptsname_r: Result<
        unsafe extern "C" fn(
            __fd: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub unlockpt: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getsubopt: Result<
        unsafe extern "C" fn(
            __option: *mut *mut ::std::os::raw::c_char,
            __tokens: *const *mut ::std::os::raw::c_char,
            __value_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub div: Result<
        unsafe extern "C" fn(
            __numerator: ::std::os::raw::c_int,
            __denominator: ::std::os::raw::c_int,
        ) -> div_t,
        ::libloading::Error,
    >,
    pub ldiv: Result<
        unsafe extern "C" fn(
            __numerator: ::std::os::raw::c_long,
            __denominator: ::std::os::raw::c_long,
        ) -> ldiv_t,
        ::libloading::Error,
    >,
    pub lldiv: Result<
        unsafe extern "C" fn(
            __numerator: ::std::os::raw::c_longlong,
            __denominator: ::std::os::raw::c_longlong,
        ) -> lldiv_t,
        ::libloading::Error,
    >,
    pub getloadavg: Result<
        unsafe extern "C" fn(
            __averages: *mut f64,
            __n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub getprogname:
        Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub setprogname:
        Result<unsafe extern "C" fn(__name: *const ::std::os::raw::c_char), ::libloading::Error>,
    pub mblen: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub mbstowcs: Result<
        unsafe extern "C" fn(
            __dst: *mut wchar_t,
            __src: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub mbtowc: Result<
        unsafe extern "C" fn(
            __wc_ptr: *mut wchar_t,
            __s: *const ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wctomb: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __wc: wchar_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub wcstombs: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const wchar_t,
            __n: size_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub __ctype_get_mb_cur_max: Result<unsafe extern "C" fn() -> size_t, ::libloading::Error>,
    pub abs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub labs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub llabs: Result<
        unsafe extern "C" fn(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtof: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> f32,
        ::libloading::Error,
    >,
    pub atof: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> f64,
        ::libloading::Error,
    >,
    pub rand: Result<unsafe extern "C" fn() -> ::std::os::raw::c_int, ::libloading::Error>,
    pub srand: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub random: Result<unsafe extern "C" fn() -> ::std::os::raw::c_long, ::libloading::Error>,
    pub srandom: Result<unsafe extern "C" fn(__seed: ::std::os::raw::c_uint), ::libloading::Error>,
    pub grantpt: Result<
        unsafe extern "C" fn(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strtoll_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> ::std::os::raw::c_longlong,
        ::libloading::Error,
    >,
    pub strtoull_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> ::std::os::raw::c_ulonglong,
        ::libloading::Error,
    >,
    pub strtold_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __l: locale_t,
        ) -> u128,
        ::libloading::Error,
    >,
    pub strtod_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __l: locale_t,
        ) -> f64,
        ::libloading::Error,
    >,
    pub strtof_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            __l: locale_t,
        ) -> f32,
        ::libloading::Error,
    >,
    pub strtol_l: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __end_ptr: *mut *mut ::std::os::raw::c_char,
            arg1: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> ::std::os::raw::c_long,
        ::libloading::Error,
    >,
    pub strcasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strcasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __l: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strncasecmp_l: Result<
        unsafe extern "C" fn(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: size_t,
            __l: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memccpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __stop_char: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_void,
            __ch: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memrchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_void,
            __ch: ::std::os::raw::c_int,
            __n: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memcmp: Result<
        unsafe extern "C" fn(
            __lhs: *const ::std::os::raw::c_void,
            __rhs: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub memcpy: Result<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmove: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memset: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_void,
            __ch: ::std::os::raw::c_int,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub memmem: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_void,
            __haystack_size: size_t,
            __needle: *const ::std::os::raw::c_void,
            __needle_size: size_t,
        ) -> *mut ::std::os::raw::c_void,
        ::libloading::Error,
    >,
    pub strchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __ch: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __strchr_chk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __ch: ::std::os::raw::c_int,
            __n: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strrchr: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __ch: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub __strrchr_chk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __ch: ::std::os::raw::c_int,
            __n: size_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strlen: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub __strlen_chk: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char, __n: size_t) -> size_t,
        ::libloading::Error,
    >,
    pub strcmp: Result<
        unsafe extern "C" fn(
            __lhs: *const ::std::os::raw::c_char,
            __rhs: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stpcpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcat: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strdup: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strstr: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcasestr: Result<
        unsafe extern "C" fn(
            __haystack: *const ::std::os::raw::c_char,
            __needle: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delimiter: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strtok_r: Result<
        unsafe extern "C" fn(
            __s: *mut ::std::os::raw::c_char,
            __delimiter: *const ::std::os::raw::c_char,
            __pos_ptr: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror: Result<
        unsafe extern "C" fn(__errno_value: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror_l: Result<
        unsafe extern "C" fn(
            __errno_value: ::std::os::raw::c_int,
            __l: locale_t,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strerror_r: Result<
        unsafe extern "C" fn(
            __errno_value: ::std::os::raw::c_int,
            __buf: *mut ::std::os::raw::c_char,
            __n: size_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strnlen: Result<
        unsafe extern "C" fn(__s: *const ::std::os::raw::c_char, __n: size_t) -> size_t,
        ::libloading::Error,
    >,
    pub strncat: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strndup: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncmp: Result<
        unsafe extern "C" fn(
            __lhs: *const ::std::os::raw::c_char,
            __rhs: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub stpncpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strncpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strlcat: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strlcpy: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strcspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __reject: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strpbrk: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strsep: Result<
        unsafe extern "C" fn(
            __s_ptr: *mut *mut ::std::os::raw::c_char,
            __delimiter: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strspn: Result<
        unsafe extern "C" fn(
            __s: *const ::std::os::raw::c_char,
            __accept: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strsignal: Result<
        unsafe extern "C" fn(__signal: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char,
        ::libloading::Error,
    >,
    pub strcoll: Result<
        unsafe extern "C" fn(
            __lhs: *const ::std::os::raw::c_char,
            __rhs: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_ulong,
        ::libloading::Error,
    >,
    pub strcoll_l: Result<
        unsafe extern "C" fn(
            __lhs: *const ::std::os::raw::c_char,
            __rhs: *const ::std::os::raw::c_char,
            __l: locale_t,
        ) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub strxfrm_l: Result<
        unsafe extern "C" fn(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: size_t,
            __l: locale_t,
        ) -> size_t,
        ::libloading::Error,
    >,
    pub OrtGetApiBase: Result<unsafe extern "C" fn() -> *const OrtApiBase, ::libloading::Error>,
}
impl OnnxRuntime {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let __library = ::libloading::Library::new(path)?;
        let android_get_application_target_sdk_version = __library
            .get(b"android_get_application_target_sdk_version\0")
            .map(|sym| *sym);
        let android_get_device_api_level = __library
            .get(b"android_get_device_api_level\0")
            .map(|sym| *sym);
        let clearerr = __library.get(b"clearerr\0").map(|sym| *sym);
        let fclose = __library.get(b"fclose\0").map(|sym| *sym);
        let feof = __library.get(b"feof\0").map(|sym| *sym);
        let ferror = __library.get(b"ferror\0").map(|sym| *sym);
        let fflush = __library.get(b"fflush\0").map(|sym| *sym);
        let fgetc = __library.get(b"fgetc\0").map(|sym| *sym);
        let fgets = __library.get(b"fgets\0").map(|sym| *sym);
        let fprintf = __library.get(b"fprintf\0").map(|sym| *sym);
        let fputc = __library.get(b"fputc\0").map(|sym| *sym);
        let fputs = __library.get(b"fputs\0").map(|sym| *sym);
        let fread = __library.get(b"fread\0").map(|sym| *sym);
        let fscanf = __library.get(b"fscanf\0").map(|sym| *sym);
        let fwrite = __library.get(b"fwrite\0").map(|sym| *sym);
        let getc = __library.get(b"getc\0").map(|sym| *sym);
        let getchar = __library.get(b"getchar\0").map(|sym| *sym);
        let getdelim = __library.get(b"getdelim\0").map(|sym| *sym);
        let getline = __library.get(b"getline\0").map(|sym| *sym);
        let perror = __library.get(b"perror\0").map(|sym| *sym);
        let printf = __library.get(b"printf\0").map(|sym| *sym);
        let putc = __library.get(b"putc\0").map(|sym| *sym);
        let putchar = __library.get(b"putchar\0").map(|sym| *sym);
        let puts = __library.get(b"puts\0").map(|sym| *sym);
        let remove = __library.get(b"remove\0").map(|sym| *sym);
        let rewind = __library.get(b"rewind\0").map(|sym| *sym);
        let scanf = __library.get(b"scanf\0").map(|sym| *sym);
        let setbuf = __library.get(b"setbuf\0").map(|sym| *sym);
        let setvbuf = __library.get(b"setvbuf\0").map(|sym| *sym);
        let sscanf = __library.get(b"sscanf\0").map(|sym| *sym);
        let ungetc = __library.get(b"ungetc\0").map(|sym| *sym);
        let vfprintf = __library.get(b"vfprintf\0").map(|sym| *sym);
        let vprintf = __library.get(b"vprintf\0").map(|sym| *sym);
        let dprintf = __library.get(b"dprintf\0").map(|sym| *sym);
        let vdprintf = __library.get(b"vdprintf\0").map(|sym| *sym);
        let sprintf = __library.get(b"sprintf\0").map(|sym| *sym);
        let vsprintf = __library.get(b"vsprintf\0").map(|sym| *sym);
        let tmpnam = __library.get(b"tmpnam\0").map(|sym| *sym);
        let tempnam = __library.get(b"tempnam\0").map(|sym| *sym);
        let rename = __library.get(b"rename\0").map(|sym| *sym);
        let renameat = __library.get(b"renameat\0").map(|sym| *sym);
        let fseek = __library.get(b"fseek\0").map(|sym| *sym);
        let ftell = __library.get(b"ftell\0").map(|sym| *sym);
        let fgetpos = __library.get(b"fgetpos\0").map(|sym| *sym);
        let fsetpos = __library.get(b"fsetpos\0").map(|sym| *sym);
        let fseeko = __library.get(b"fseeko\0").map(|sym| *sym);
        let ftello = __library.get(b"ftello\0").map(|sym| *sym);
        let fgetpos64 = __library.get(b"fgetpos64\0").map(|sym| *sym);
        let fsetpos64 = __library.get(b"fsetpos64\0").map(|sym| *sym);
        let fseeko64 = __library.get(b"fseeko64\0").map(|sym| *sym);
        let ftello64 = __library.get(b"ftello64\0").map(|sym| *sym);
        let fopen = __library.get(b"fopen\0").map(|sym| *sym);
        let fopen64 = __library.get(b"fopen64\0").map(|sym| *sym);
        let freopen = __library.get(b"freopen\0").map(|sym| *sym);
        let freopen64 = __library.get(b"freopen64\0").map(|sym| *sym);
        let tmpfile = __library.get(b"tmpfile\0").map(|sym| *sym);
        let tmpfile64 = __library.get(b"tmpfile64\0").map(|sym| *sym);
        let snprintf = __library.get(b"snprintf\0").map(|sym| *sym);
        let vfscanf = __library.get(b"vfscanf\0").map(|sym| *sym);
        let vscanf = __library.get(b"vscanf\0").map(|sym| *sym);
        let vsnprintf = __library.get(b"vsnprintf\0").map(|sym| *sym);
        let vsscanf = __library.get(b"vsscanf\0").map(|sym| *sym);
        let ctermid = __library.get(b"ctermid\0").map(|sym| *sym);
        let fdopen = __library.get(b"fdopen\0").map(|sym| *sym);
        let fileno = __library.get(b"fileno\0").map(|sym| *sym);
        let pclose = __library.get(b"pclose\0").map(|sym| *sym);
        let popen = __library.get(b"popen\0").map(|sym| *sym);
        let flockfile = __library.get(b"flockfile\0").map(|sym| *sym);
        let ftrylockfile = __library.get(b"ftrylockfile\0").map(|sym| *sym);
        let funlockfile = __library.get(b"funlockfile\0").map(|sym| *sym);
        let getc_unlocked = __library.get(b"getc_unlocked\0").map(|sym| *sym);
        let getchar_unlocked = __library.get(b"getchar_unlocked\0").map(|sym| *sym);
        let putc_unlocked = __library.get(b"putc_unlocked\0").map(|sym| *sym);
        let putchar_unlocked = __library.get(b"putchar_unlocked\0").map(|sym| *sym);
        let fmemopen = __library.get(b"fmemopen\0").map(|sym| *sym);
        let open_memstream = __library.get(b"open_memstream\0").map(|sym| *sym);
        let asprintf = __library.get(b"asprintf\0").map(|sym| *sym);
        let fgetln = __library.get(b"fgetln\0").map(|sym| *sym);
        let fpurge = __library.get(b"fpurge\0").map(|sym| *sym);
        let setbuffer = __library.get(b"setbuffer\0").map(|sym| *sym);
        let setlinebuf = __library.get(b"setlinebuf\0").map(|sym| *sym);
        let vasprintf = __library.get(b"vasprintf\0").map(|sym| *sym);
        let clearerr_unlocked = __library.get(b"clearerr_unlocked\0").map(|sym| *sym);
        let feof_unlocked = __library.get(b"feof_unlocked\0").map(|sym| *sym);
        let ferror_unlocked = __library.get(b"ferror_unlocked\0").map(|sym| *sym);
        let fileno_unlocked = __library.get(b"fileno_unlocked\0").map(|sym| *sym);
        let malloc = __library.get(b"malloc\0").map(|sym| *sym);
        let calloc = __library.get(b"calloc\0").map(|sym| *sym);
        let realloc = __library.get(b"realloc\0").map(|sym| *sym);
        let reallocarray = __library.get(b"reallocarray\0").map(|sym| *sym);
        let free = __library.get(b"free\0").map(|sym| *sym);
        let memalign = __library.get(b"memalign\0").map(|sym| *sym);
        let malloc_usable_size = __library.get(b"malloc_usable_size\0").map(|sym| *sym);
        let mallinfo = __library.get(b"mallinfo\0").map(|sym| *sym);
        let malloc_info = __library.get(b"malloc_info\0").map(|sym| *sym);
        let mallopt = __library.get(b"mallopt\0").map(|sym| *sym);
        let abort = __library.get(b"abort\0").map(|sym| *sym);
        let exit = __library.get(b"exit\0").map(|sym| *sym);
        let _Exit = __library.get(b"_Exit\0").map(|sym| *sym);
        let atexit = __library.get(b"atexit\0").map(|sym| *sym);
        let at_quick_exit = __library.get(b"at_quick_exit\0").map(|sym| *sym);
        let quick_exit = __library.get(b"quick_exit\0").map(|sym| *sym);
        let getenv = __library.get(b"getenv\0").map(|sym| *sym);
        let putenv = __library.get(b"putenv\0").map(|sym| *sym);
        let setenv = __library.get(b"setenv\0").map(|sym| *sym);
        let unsetenv = __library.get(b"unsetenv\0").map(|sym| *sym);
        let clearenv = __library.get(b"clearenv\0").map(|sym| *sym);
        let mkdtemp = __library.get(b"mkdtemp\0").map(|sym| *sym);
        let mktemp = __library.get(b"mktemp\0").map(|sym| *sym);
        let mkostemp64 = __library.get(b"mkostemp64\0").map(|sym| *sym);
        let mkostemp = __library.get(b"mkostemp\0").map(|sym| *sym);
        let mkostemps64 = __library.get(b"mkostemps64\0").map(|sym| *sym);
        let mkostemps = __library.get(b"mkostemps\0").map(|sym| *sym);
        let mkstemp64 = __library.get(b"mkstemp64\0").map(|sym| *sym);
        let mkstemp = __library.get(b"mkstemp\0").map(|sym| *sym);
        let mkstemps64 = __library.get(b"mkstemps64\0").map(|sym| *sym);
        let mkstemps = __library.get(b"mkstemps\0").map(|sym| *sym);
        let strtol = __library.get(b"strtol\0").map(|sym| *sym);
        let strtoll = __library.get(b"strtoll\0").map(|sym| *sym);
        let strtoul = __library.get(b"strtoul\0").map(|sym| *sym);
        let strtoull = __library.get(b"strtoull\0").map(|sym| *sym);
        let posix_memalign = __library.get(b"posix_memalign\0").map(|sym| *sym);
        let aligned_alloc = __library.get(b"aligned_alloc\0").map(|sym| *sym);
        let strtod = __library.get(b"strtod\0").map(|sym| *sym);
        let strtold = __library.get(b"strtold\0").map(|sym| *sym);
        let strtoul_l = __library.get(b"strtoul_l\0").map(|sym| *sym);
        let atoi = __library.get(b"atoi\0").map(|sym| *sym);
        let atol = __library.get(b"atol\0").map(|sym| *sym);
        let atoll = __library.get(b"atoll\0").map(|sym| *sym);
        let realpath = __library.get(b"realpath\0").map(|sym| *sym);
        let system = __library.get(b"system\0").map(|sym| *sym);
        let bsearch = __library.get(b"bsearch\0").map(|sym| *sym);
        let qsort = __library.get(b"qsort\0").map(|sym| *sym);
        let arc4random = __library.get(b"arc4random\0").map(|sym| *sym);
        let arc4random_uniform = __library.get(b"arc4random_uniform\0").map(|sym| *sym);
        let arc4random_buf = __library.get(b"arc4random_buf\0").map(|sym| *sym);
        let rand_r = __library.get(b"rand_r\0").map(|sym| *sym);
        let drand48 = __library.get(b"drand48\0").map(|sym| *sym);
        let erand48 = __library.get(b"erand48\0").map(|sym| *sym);
        let jrand48 = __library.get(b"jrand48\0").map(|sym| *sym);
        let lcong48 = __library.get(b"lcong48\0").map(|sym| *sym);
        let lrand48 = __library.get(b"lrand48\0").map(|sym| *sym);
        let mrand48 = __library.get(b"mrand48\0").map(|sym| *sym);
        let nrand48 = __library.get(b"nrand48\0").map(|sym| *sym);
        let seed48 = __library.get(b"seed48\0").map(|sym| *sym);
        let srand48 = __library.get(b"srand48\0").map(|sym| *sym);
        let initstate = __library.get(b"initstate\0").map(|sym| *sym);
        let setstate = __library.get(b"setstate\0").map(|sym| *sym);
        let getpt = __library.get(b"getpt\0").map(|sym| *sym);
        let posix_openpt = __library.get(b"posix_openpt\0").map(|sym| *sym);
        let ptsname = __library.get(b"ptsname\0").map(|sym| *sym);
        let ptsname_r = __library.get(b"ptsname_r\0").map(|sym| *sym);
        let unlockpt = __library.get(b"unlockpt\0").map(|sym| *sym);
        let getsubopt = __library.get(b"getsubopt\0").map(|sym| *sym);
        let div = __library.get(b"div\0").map(|sym| *sym);
        let ldiv = __library.get(b"ldiv\0").map(|sym| *sym);
        let lldiv = __library.get(b"lldiv\0").map(|sym| *sym);
        let getloadavg = __library.get(b"getloadavg\0").map(|sym| *sym);
        let getprogname = __library.get(b"getprogname\0").map(|sym| *sym);
        let setprogname = __library.get(b"setprogname\0").map(|sym| *sym);
        let mblen = __library.get(b"mblen\0").map(|sym| *sym);
        let mbstowcs = __library.get(b"mbstowcs\0").map(|sym| *sym);
        let mbtowc = __library.get(b"mbtowc\0").map(|sym| *sym);
        let wctomb = __library.get(b"wctomb\0").map(|sym| *sym);
        let wcstombs = __library.get(b"wcstombs\0").map(|sym| *sym);
        let __ctype_get_mb_cur_max = __library.get(b"__ctype_get_mb_cur_max\0").map(|sym| *sym);
        let abs = __library.get(b"abs\0").map(|sym| *sym);
        let labs = __library.get(b"labs\0").map(|sym| *sym);
        let llabs = __library.get(b"llabs\0").map(|sym| *sym);
        let strtof = __library.get(b"strtof\0").map(|sym| *sym);
        let atof = __library.get(b"atof\0").map(|sym| *sym);
        let rand = __library.get(b"rand\0").map(|sym| *sym);
        let srand = __library.get(b"srand\0").map(|sym| *sym);
        let random = __library.get(b"random\0").map(|sym| *sym);
        let srandom = __library.get(b"srandom\0").map(|sym| *sym);
        let grantpt = __library.get(b"grantpt\0").map(|sym| *sym);
        let strtoll_l = __library.get(b"strtoll_l\0").map(|sym| *sym);
        let strtoull_l = __library.get(b"strtoull_l\0").map(|sym| *sym);
        let strtold_l = __library.get(b"strtold_l\0").map(|sym| *sym);
        let strtod_l = __library.get(b"strtod_l\0").map(|sym| *sym);
        let strtof_l = __library.get(b"strtof_l\0").map(|sym| *sym);
        let strtol_l = __library.get(b"strtol_l\0").map(|sym| *sym);
        let strcasecmp = __library.get(b"strcasecmp\0").map(|sym| *sym);
        let strcasecmp_l = __library.get(b"strcasecmp_l\0").map(|sym| *sym);
        let strncasecmp = __library.get(b"strncasecmp\0").map(|sym| *sym);
        let strncasecmp_l = __library.get(b"strncasecmp_l\0").map(|sym| *sym);
        let memccpy = __library.get(b"memccpy\0").map(|sym| *sym);
        let memchr = __library.get(b"memchr\0").map(|sym| *sym);
        let memrchr = __library.get(b"memrchr\0").map(|sym| *sym);
        let memcmp = __library.get(b"memcmp\0").map(|sym| *sym);
        let memcpy = __library.get(b"memcpy\0").map(|sym| *sym);
        let memmove = __library.get(b"memmove\0").map(|sym| *sym);
        let memset = __library.get(b"memset\0").map(|sym| *sym);
        let memmem = __library.get(b"memmem\0").map(|sym| *sym);
        let strchr = __library.get(b"strchr\0").map(|sym| *sym);
        let __strchr_chk = __library.get(b"__strchr_chk\0").map(|sym| *sym);
        let strrchr = __library.get(b"strrchr\0").map(|sym| *sym);
        let __strrchr_chk = __library.get(b"__strrchr_chk\0").map(|sym| *sym);
        let strlen = __library.get(b"strlen\0").map(|sym| *sym);
        let __strlen_chk = __library.get(b"__strlen_chk\0").map(|sym| *sym);
        let strcmp = __library.get(b"strcmp\0").map(|sym| *sym);
        let stpcpy = __library.get(b"stpcpy\0").map(|sym| *sym);
        let strcpy = __library.get(b"strcpy\0").map(|sym| *sym);
        let strcat = __library.get(b"strcat\0").map(|sym| *sym);
        let strdup = __library.get(b"strdup\0").map(|sym| *sym);
        let strstr = __library.get(b"strstr\0").map(|sym| *sym);
        let strcasestr = __library.get(b"strcasestr\0").map(|sym| *sym);
        let strtok = __library.get(b"strtok\0").map(|sym| *sym);
        let strtok_r = __library.get(b"strtok_r\0").map(|sym| *sym);
        let strerror = __library.get(b"strerror\0").map(|sym| *sym);
        let strerror_l = __library.get(b"strerror_l\0").map(|sym| *sym);
        let strerror_r = __library.get(b"strerror_r\0").map(|sym| *sym);
        let strnlen = __library.get(b"strnlen\0").map(|sym| *sym);
        let strncat = __library.get(b"strncat\0").map(|sym| *sym);
        let strndup = __library.get(b"strndup\0").map(|sym| *sym);
        let strncmp = __library.get(b"strncmp\0").map(|sym| *sym);
        let stpncpy = __library.get(b"stpncpy\0").map(|sym| *sym);
        let strncpy = __library.get(b"strncpy\0").map(|sym| *sym);
        let strlcat = __library.get(b"strlcat\0").map(|sym| *sym);
        let strlcpy = __library.get(b"strlcpy\0").map(|sym| *sym);
        let strcspn = __library.get(b"strcspn\0").map(|sym| *sym);
        let strpbrk = __library.get(b"strpbrk\0").map(|sym| *sym);
        let strsep = __library.get(b"strsep\0").map(|sym| *sym);
        let strspn = __library.get(b"strspn\0").map(|sym| *sym);
        let strsignal = __library.get(b"strsignal\0").map(|sym| *sym);
        let strcoll = __library.get(b"strcoll\0").map(|sym| *sym);
        let strxfrm = __library.get(b"strxfrm\0").map(|sym| *sym);
        let strcoll_l = __library.get(b"strcoll_l\0").map(|sym| *sym);
        let strxfrm_l = __library.get(b"strxfrm_l\0").map(|sym| *sym);
        let OrtGetApiBase = __library.get(b"OrtGetApiBase\0").map(|sym| *sym);
        Ok(OnnxRuntime {
            __library,
            android_get_application_target_sdk_version,
            android_get_device_api_level,
            clearerr,
            fclose,
            feof,
            ferror,
            fflush,
            fgetc,
            fgets,
            fprintf,
            fputc,
            fputs,
            fread,
            fscanf,
            fwrite,
            getc,
            getchar,
            getdelim,
            getline,
            perror,
            printf,
            putc,
            putchar,
            puts,
            remove,
            rewind,
            scanf,
            setbuf,
            setvbuf,
            sscanf,
            ungetc,
            vfprintf,
            vprintf,
            dprintf,
            vdprintf,
            sprintf,
            vsprintf,
            tmpnam,
            tempnam,
            rename,
            renameat,
            fseek,
            ftell,
            fgetpos,
            fsetpos,
            fseeko,
            ftello,
            fgetpos64,
            fsetpos64,
            fseeko64,
            ftello64,
            fopen,
            fopen64,
            freopen,
            freopen64,
            tmpfile,
            tmpfile64,
            snprintf,
            vfscanf,
            vscanf,
            vsnprintf,
            vsscanf,
            ctermid,
            fdopen,
            fileno,
            pclose,
            popen,
            flockfile,
            ftrylockfile,
            funlockfile,
            getc_unlocked,
            getchar_unlocked,
            putc_unlocked,
            putchar_unlocked,
            fmemopen,
            open_memstream,
            asprintf,
            fgetln,
            fpurge,
            setbuffer,
            setlinebuf,
            vasprintf,
            clearerr_unlocked,
            feof_unlocked,
            ferror_unlocked,
            fileno_unlocked,
            malloc,
            calloc,
            realloc,
            reallocarray,
            free,
            memalign,
            malloc_usable_size,
            mallinfo,
            malloc_info,
            mallopt,
            abort,
            exit,
            _Exit,
            atexit,
            at_quick_exit,
            quick_exit,
            getenv,
            putenv,
            setenv,
            unsetenv,
            clearenv,
            mkdtemp,
            mktemp,
            mkostemp64,
            mkostemp,
            mkostemps64,
            mkostemps,
            mkstemp64,
            mkstemp,
            mkstemps64,
            mkstemps,
            strtol,
            strtoll,
            strtoul,
            strtoull,
            posix_memalign,
            aligned_alloc,
            strtod,
            strtold,
            strtoul_l,
            atoi,
            atol,
            atoll,
            realpath,
            system,
            bsearch,
            qsort,
            arc4random,
            arc4random_uniform,
            arc4random_buf,
            rand_r,
            drand48,
            erand48,
            jrand48,
            lcong48,
            lrand48,
            mrand48,
            nrand48,
            seed48,
            srand48,
            initstate,
            setstate,
            getpt,
            posix_openpt,
            ptsname,
            ptsname_r,
            unlockpt,
            getsubopt,
            div,
            ldiv,
            lldiv,
            getloadavg,
            getprogname,
            setprogname,
            mblen,
            mbstowcs,
            mbtowc,
            wctomb,
            wcstombs,
            __ctype_get_mb_cur_max,
            abs,
            labs,
            llabs,
            strtof,
            atof,
            rand,
            srand,
            random,
            srandom,
            grantpt,
            strtoll_l,
            strtoull_l,
            strtold_l,
            strtod_l,
            strtof_l,
            strtol_l,
            strcasecmp,
            strcasecmp_l,
            strncasecmp,
            strncasecmp_l,
            memccpy,
            memchr,
            memrchr,
            memcmp,
            memcpy,
            memmove,
            memset,
            memmem,
            strchr,
            __strchr_chk,
            strrchr,
            __strrchr_chk,
            strlen,
            __strlen_chk,
            strcmp,
            stpcpy,
            strcpy,
            strcat,
            strdup,
            strstr,
            strcasestr,
            strtok,
            strtok_r,
            strerror,
            strerror_l,
            strerror_r,
            strnlen,
            strncat,
            strndup,
            strncmp,
            stpncpy,
            strncpy,
            strlcat,
            strlcpy,
            strcspn,
            strpbrk,
            strsep,
            strspn,
            strsignal,
            strcoll,
            strxfrm,
            strcoll_l,
            strxfrm_l,
            OrtGetApiBase,
        })
    }
    pub unsafe fn android_get_application_target_sdk_version(&self) -> ::std::os::raw::c_int {
        let sym = self
            .android_get_application_target_sdk_version
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn android_get_device_api_level(&self) -> ::std::os::raw::c_int {
        let sym = self
            .android_get_device_api_level
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn clearerr(&self, __fp: *mut FILE) -> () {
        let sym = self
            .clearerr
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fclose(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.fclose.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn feof(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.feof.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn ferror(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.ferror.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fflush(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.fflush.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fgetc(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.fgetc.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fgets(
        &self,
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.fgets.as_ref().expect("Expected function, got error.");
        (sym)(__buf, __size, __fp)
    }
    pub unsafe fn fputc(
        &self,
        __ch: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self.fputc.as_ref().expect("Expected function, got error.");
        (sym)(__ch, __fp)
    }
    pub unsafe fn fputs(
        &self,
        __s: *const ::std::os::raw::c_char,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self.fputs.as_ref().expect("Expected function, got error.");
        (sym)(__s, __fp)
    }
    pub unsafe fn fread(
        &self,
        __buf: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __count: ::std::os::raw::c_ulong,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        let sym = self.fread.as_ref().expect("Expected function, got error.");
        (sym)(__buf, __size, __count, __fp)
    }
    pub unsafe fn fwrite(
        &self,
        __buf: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __count: ::std::os::raw::c_ulong,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_ulong {
        let sym = self.fwrite.as_ref().expect("Expected function, got error.");
        (sym)(__buf, __size, __count, __fp)
    }
    pub unsafe fn getc(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.getc.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn getchar(&self) -> ::std::os::raw::c_int {
        let sym = self
            .getchar
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn getdelim(
        &self,
        __line_ptr: *mut *mut ::std::os::raw::c_char,
        __line_length_ptr: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ssize_t {
        let sym = self
            .getdelim
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__line_ptr, __line_length_ptr, __delimiter, __fp)
    }
    pub unsafe fn getline(
        &self,
        __line_ptr: *mut *mut ::std::os::raw::c_char,
        __line_length_ptr: *mut size_t,
        __fp: *mut FILE,
    ) -> ssize_t {
        let sym = self
            .getline
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__line_ptr, __line_length_ptr, __fp)
    }
    pub unsafe fn perror(&self, __msg: *const ::std::os::raw::c_char) -> () {
        let sym = self.perror.as_ref().expect("Expected function, got error.");
        (sym)(__msg)
    }
    pub unsafe fn putc(
        &self,
        __ch: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self.putc.as_ref().expect("Expected function, got error.");
        (sym)(__ch, __fp)
    }
    pub unsafe fn putchar(&self, __ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self
            .putchar
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ch)
    }
    pub unsafe fn puts(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self.puts.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn remove(&self, __path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self.remove.as_ref().expect("Expected function, got error.");
        (sym)(__path)
    }
    pub unsafe fn rewind(&self, __fp: *mut FILE) -> () {
        let sym = self.rewind.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn setbuf(&self, __fp: *mut FILE, __buf: *mut ::std::os::raw::c_char) -> () {
        let sym = self.setbuf.as_ref().expect("Expected function, got error.");
        (sym)(__fp, __buf)
    }
    pub unsafe fn setvbuf(
        &self,
        __fp: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __mode: ::std::os::raw::c_int,
        __size: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .setvbuf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __buf, __mode, __size)
    }
    pub unsafe fn ungetc(
        &self,
        __ch: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self.ungetc.as_ref().expect("Expected function, got error.");
        (sym)(__ch, __fp)
    }
    pub unsafe fn vfprintf(
        &self,
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vfprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __fmt, __args)
    }
    pub unsafe fn vprintf(
        &self,
        __fp: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __args)
    }
    pub unsafe fn vdprintf(
        &self,
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __args: va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vdprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fd, __fmt, __args)
    }
    pub unsafe fn vsprintf(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vsprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __fmt, __args)
    }
    pub unsafe fn tmpnam(&self, __s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        let sym = self.tmpnam.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn tempnam(
        &self,
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .tempnam
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dir, __prefix)
    }
    pub unsafe fn rename(
        &self,
        __old_path: *const ::std::os::raw::c_char,
        __new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self.rename.as_ref().expect("Expected function, got error.");
        (sym)(__old_path, __new_path)
    }
    pub unsafe fn renameat(
        &self,
        __old_dir_fd: ::std::os::raw::c_int,
        __old_path: *const ::std::os::raw::c_char,
        __new_dir_fd: ::std::os::raw::c_int,
        __new_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .renameat
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__old_dir_fd, __old_path, __new_dir_fd, __new_path)
    }
    pub unsafe fn fseek(
        &self,
        __fp: *mut FILE,
        __offset: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self.fseek.as_ref().expect("Expected function, got error.");
        (sym)(__fp, __offset, __whence)
    }
    pub unsafe fn ftell(&self, __fp: *mut FILE) -> ::std::os::raw::c_long {
        let sym = self.ftell.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fgetpos(&self, __fp: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int {
        let sym = self
            .fgetpos
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __pos)
    }
    pub unsafe fn fsetpos(&self, __fp: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int {
        let sym = self
            .fsetpos
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __pos)
    }
    pub unsafe fn fseeko(
        &self,
        __fp: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self.fseeko.as_ref().expect("Expected function, got error.");
        (sym)(__fp, __offset, __whence)
    }
    pub unsafe fn ftello(&self, __fp: *mut FILE) -> off_t {
        let sym = self.ftello.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fgetpos64(&self, __fp: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int {
        let sym = self
            .fgetpos64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __pos)
    }
    pub unsafe fn fsetpos64(
        &self,
        __fp: *mut FILE,
        __pos: *const fpos64_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .fsetpos64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __pos)
    }
    pub unsafe fn fseeko64(
        &self,
        __fp: *mut FILE,
        __offset: off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .fseeko64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __offset, __whence)
    }
    pub unsafe fn ftello64(&self, __fp: *mut FILE) -> off64_t {
        let sym = self
            .ftello64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fopen(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        let sym = self.fopen.as_ref().expect("Expected function, got error.");
        (sym)(__path, __mode)
    }
    pub unsafe fn fopen64(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        let sym = self
            .fopen64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__path, __mode)
    }
    pub unsafe fn freopen(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE {
        let sym = self
            .freopen
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__path, __mode, __fp)
    }
    pub unsafe fn freopen64(
        &self,
        __path: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE {
        let sym = self
            .freopen64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__path, __mode, __fp)
    }
    pub unsafe fn tmpfile(&self) -> *mut FILE {
        let sym = self
            .tmpfile
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn tmpfile64(&self) -> *mut FILE {
        let sym = self
            .tmpfile64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn vfscanf(
        &self,
        __fp: *mut FILE,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vfscanf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __fmt, __args)
    }
    pub unsafe fn vscanf(
        &self,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self.vscanf.as_ref().expect("Expected function, got error.");
        (sym)(__fmt, __args)
    }
    pub unsafe fn vsnprintf(
        &self,
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vsnprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__buf, __size, __fmt, __args)
    }
    pub unsafe fn vsscanf(
        &self,
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: __builtin_va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vsscanf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __fmt, __args)
    }
    pub unsafe fn ctermid(
        &self,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .ctermid
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__buf)
    }
    pub unsafe fn fdopen(
        &self,
        __fd: ::std::os::raw::c_int,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        let sym = self.fdopen.as_ref().expect("Expected function, got error.");
        (sym)(__fd, __mode)
    }
    pub unsafe fn fileno(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.fileno.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn pclose(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.pclose.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn popen(
        &self,
        __command: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        let sym = self.popen.as_ref().expect("Expected function, got error.");
        (sym)(__command, __mode)
    }
    pub unsafe fn flockfile(&self, __fp: *mut FILE) -> () {
        let sym = self
            .flockfile
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn ftrylockfile(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .ftrylockfile
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn funlockfile(&self, __fp: *mut FILE) -> () {
        let sym = self
            .funlockfile
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn getc_unlocked(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .getc_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn getchar_unlocked(&self) -> ::std::os::raw::c_int {
        let sym = self
            .getchar_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn putc_unlocked(
        &self,
        __ch: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .putc_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ch, __fp)
    }
    pub unsafe fn putchar_unlocked(&self, __ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self
            .putchar_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ch)
    }
    pub unsafe fn fmemopen(
        &self,
        __buf: *mut ::std::os::raw::c_void,
        __size: size_t,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE {
        let sym = self
            .fmemopen
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__buf, __size, __mode)
    }
    pub unsafe fn open_memstream(
        &self,
        __ptr: *mut *mut ::std::os::raw::c_char,
        __size_ptr: *mut size_t,
    ) -> *mut FILE {
        let sym = self
            .open_memstream
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ptr, __size_ptr)
    }
    pub unsafe fn fgetln(
        &self,
        __fp: *mut FILE,
        __length_ptr: *mut size_t,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.fgetln.as_ref().expect("Expected function, got error.");
        (sym)(__fp, __length_ptr)
    }
    pub unsafe fn fpurge(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self.fpurge.as_ref().expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn setbuffer(
        &self,
        __fp: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_int,
    ) -> () {
        let sym = self
            .setbuffer
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp, __buf, __size)
    }
    pub unsafe fn setlinebuf(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .setlinebuf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn vasprintf(
        &self,
        __s_ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __args: va_list,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .vasprintf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s_ptr, __fmt, __args)
    }
    pub unsafe fn clearerr_unlocked(&self, __fp: *mut FILE) -> () {
        let sym = self
            .clearerr_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn feof_unlocked(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .feof_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn ferror_unlocked(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .ferror_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn fileno_unlocked(&self, __fp: *mut FILE) -> ::std::os::raw::c_int {
        let sym = self
            .fileno_unlocked
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fp)
    }
    pub unsafe fn malloc(
        &self,
        __byte_count: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.malloc.as_ref().expect("Expected function, got error.");
        (sym)(__byte_count)
    }
    pub unsafe fn calloc(
        &self,
        __item_count: ::std::os::raw::c_ulong,
        __item_size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.calloc.as_ref().expect("Expected function, got error.");
        (sym)(__item_count, __item_size)
    }
    pub unsafe fn realloc(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __byte_count: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .realloc
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ptr, __byte_count)
    }
    pub unsafe fn reallocarray(
        &self,
        __ptr: *mut ::std::os::raw::c_void,
        __item_count: size_t,
        __item_size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .reallocarray
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ptr, __item_count, __item_size)
    }
    pub unsafe fn free(&self, __ptr: *mut ::std::os::raw::c_void) -> () {
        let sym = self.free.as_ref().expect("Expected function, got error.");
        (sym)(__ptr)
    }
    pub unsafe fn memalign(
        &self,
        __alignment: size_t,
        __byte_count: size_t,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .memalign
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__alignment, __byte_count)
    }
    pub unsafe fn malloc_usable_size(&self, __ptr: *const ::std::os::raw::c_void) -> size_t {
        let sym = self
            .malloc_usable_size
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__ptr)
    }
    pub unsafe fn mallinfo(&self) -> mallinfo {
        let sym = self
            .mallinfo
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn malloc_info(
        &self,
        __must_be_zero: ::std::os::raw::c_int,
        __fp: *mut FILE,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .malloc_info
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__must_be_zero, __fp)
    }
    pub unsafe fn mallopt(
        &self,
        __option: ::std::os::raw::c_int,
        __value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mallopt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__option, __value)
    }
    pub unsafe fn abort(&self) -> () {
        let sym = self.abort.as_ref().expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn exit(&self, __status: ::std::os::raw::c_int) -> () {
        let sym = self.exit.as_ref().expect("Expected function, got error.");
        (sym)(__status)
    }
    pub unsafe fn _Exit(&self, __status: ::std::os::raw::c_int) -> () {
        let sym = self._Exit.as_ref().expect("Expected function, got error.");
        (sym)(__status)
    }
    pub unsafe fn atexit(
        &self,
        __fn: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        let sym = self.atexit.as_ref().expect("Expected function, got error.");
        (sym)(__fn)
    }
    pub unsafe fn at_quick_exit(
        &self,
        __fn: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .at_quick_exit
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fn)
    }
    pub unsafe fn quick_exit(&self, __status: ::std::os::raw::c_int) -> () {
        let sym = self
            .quick_exit
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__status)
    }
    pub unsafe fn getenv(
        &self,
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.getenv.as_ref().expect("Expected function, got error.");
        (sym)(__name)
    }
    pub unsafe fn putenv(
        &self,
        __assignment: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self.putenv.as_ref().expect("Expected function, got error.");
        (sym)(__assignment)
    }
    pub unsafe fn setenv(
        &self,
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self.setenv.as_ref().expect("Expected function, got error.");
        (sym)(__name, __value, __overwrite)
    }
    pub unsafe fn unsetenv(&self, __name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self
            .unsetenv
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__name)
    }
    pub unsafe fn clearenv(&self) -> ::std::os::raw::c_int {
        let sym = self
            .clearenv
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn mkdtemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .mkdtemp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template)
    }
    pub unsafe fn mktemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.mktemp.as_ref().expect("Expected function, got error.");
        (sym)(__template)
    }
    pub unsafe fn mkostemp64(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkostemp64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __flags)
    }
    pub unsafe fn mkostemp(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkostemp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __flags)
    }
    pub unsafe fn mkostemps64(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __suffix_length: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkostemps64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __suffix_length, __flags)
    }
    pub unsafe fn mkostemps(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __suffix_length: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkostemps
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __suffix_length, __flags)
    }
    pub unsafe fn mkstemp64(
        &self,
        __template: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkstemp64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template)
    }
    pub unsafe fn mkstemp(&self, __template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self
            .mkstemp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template)
    }
    pub unsafe fn mkstemps64(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkstemps64
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __flags)
    }
    pub unsafe fn mkstemps(
        &self,
        __template: *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .mkstemps
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__template, __flags)
    }
    pub unsafe fn strtol(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long {
        let sym = self.strtol.as_ref().expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base)
    }
    pub unsafe fn strtoll(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong {
        let sym = self
            .strtoll
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base)
    }
    pub unsafe fn strtoul(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strtoul
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base)
    }
    pub unsafe fn strtoull(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong {
        let sym = self
            .strtoull
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base)
    }
    pub unsafe fn posix_memalign(
        &self,
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .posix_memalign
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__memptr, __alignment, __size)
    }
    pub unsafe fn aligned_alloc(
        &self,
        __alignment: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .aligned_alloc
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__alignment, __size)
    }
    pub unsafe fn strtod(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64 {
        let sym = self.strtod.as_ref().expect("Expected function, got error.");
        (sym)(__s, __end_ptr)
    }
    pub unsafe fn strtold(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128 {
        let sym = self
            .strtold
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr)
    }
    pub unsafe fn strtoul_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strtoul_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base, __l)
    }
    pub unsafe fn atoi(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self.atoi.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn atol(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long {
        let sym = self.atol.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn atoll(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong {
        let sym = self.atoll.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn realpath(
        &self,
        __path: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .realpath
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__path, __resolved)
    }
    pub unsafe fn system(&self, __command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        let sym = self.system.as_ref().expect("Expected function, got error.");
        (sym)(__command)
    }
    pub unsafe fn bsearch(
        &self,
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __comparator: ::std::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::std::os::raw::c_void,
                __rhs: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .bsearch
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__key, __base, __nmemb, __size, __comparator)
    }
    pub unsafe fn qsort(
        &self,
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __comparator: ::std::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::std::os::raw::c_void,
                __rhs: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> () {
        let sym = self.qsort.as_ref().expect("Expected function, got error.");
        (sym)(__base, __nmemb, __size, __comparator)
    }
    pub unsafe fn arc4random(&self) -> u32 {
        let sym = self
            .arc4random
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn arc4random_uniform(&self, __upper_bound: u32) -> u32 {
        let sym = self
            .arc4random_uniform
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__upper_bound)
    }
    pub unsafe fn arc4random_buf(&self, __buf: *mut ::std::os::raw::c_void, __n: size_t) -> () {
        let sym = self
            .arc4random_buf
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__buf, __n)
    }
    pub unsafe fn rand_r(&self, __seed_ptr: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int {
        let sym = self.rand_r.as_ref().expect("Expected function, got error.");
        (sym)(__seed_ptr)
    }
    pub unsafe fn drand48(&self) -> f64 {
        let sym = self
            .drand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn erand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> f64 {
        let sym = self
            .erand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__xsubi)
    }
    pub unsafe fn jrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        let sym = self
            .jrand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__xsubi)
    }
    pub unsafe fn lcong48(&self, __param: *mut ::std::os::raw::c_ushort) -> () {
        let sym = self
            .lcong48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__param)
    }
    pub unsafe fn lrand48(&self) -> ::std::os::raw::c_long {
        let sym = self
            .lrand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn mrand48(&self) -> ::std::os::raw::c_long {
        let sym = self
            .mrand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn nrand48(&self, __xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long {
        let sym = self
            .nrand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__xsubi)
    }
    pub unsafe fn seed48(
        &self,
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort {
        let sym = self.seed48.as_ref().expect("Expected function, got error.");
        (sym)(__seed16v)
    }
    pub unsafe fn srand48(&self, __seed: ::std::os::raw::c_long) -> () {
        let sym = self
            .srand48
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__seed)
    }
    pub unsafe fn initstate(
        &self,
        __seed: ::std::os::raw::c_uint,
        __state: *mut ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .initstate
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__seed, __state, __n)
    }
    pub unsafe fn setstate(
        &self,
        __state: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .setstate
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__state)
    }
    pub unsafe fn getpt(&self) -> ::std::os::raw::c_int {
        let sym = self.getpt.as_ref().expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn posix_openpt(&self, __flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self
            .posix_openpt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__flags)
    }
    pub unsafe fn ptsname(&self, __fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        let sym = self
            .ptsname
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fd)
    }
    pub unsafe fn ptsname_r(
        &self,
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .ptsname_r
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fd, __buf, __n)
    }
    pub unsafe fn unlockpt(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self
            .unlockpt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fd)
    }
    pub unsafe fn getsubopt(
        &self,
        __option: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __value_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .getsubopt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__option, __tokens, __value_ptr)
    }
    pub unsafe fn div(
        &self,
        __numerator: ::std::os::raw::c_int,
        __denominator: ::std::os::raw::c_int,
    ) -> div_t {
        let sym = self.div.as_ref().expect("Expected function, got error.");
        (sym)(__numerator, __denominator)
    }
    pub unsafe fn ldiv(
        &self,
        __numerator: ::std::os::raw::c_long,
        __denominator: ::std::os::raw::c_long,
    ) -> ldiv_t {
        let sym = self.ldiv.as_ref().expect("Expected function, got error.");
        (sym)(__numerator, __denominator)
    }
    pub unsafe fn lldiv(
        &self,
        __numerator: ::std::os::raw::c_longlong,
        __denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t {
        let sym = self.lldiv.as_ref().expect("Expected function, got error.");
        (sym)(__numerator, __denominator)
    }
    pub unsafe fn getloadavg(
        &self,
        __averages: *mut f64,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .getloadavg
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__averages, __n)
    }
    pub unsafe fn getprogname(&self) -> *const ::std::os::raw::c_char {
        let sym = self
            .getprogname
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn setprogname(&self, __name: *const ::std::os::raw::c_char) -> () {
        let sym = self
            .setprogname
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__name)
    }
    pub unsafe fn mblen(
        &self,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self.mblen.as_ref().expect("Expected function, got error.");
        (sym)(__s, __n)
    }
    pub unsafe fn mbstowcs(
        &self,
        __dst: *mut wchar_t,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t {
        let sym = self
            .mbstowcs
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn mbtowc(
        &self,
        __wc_ptr: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self.mbtowc.as_ref().expect("Expected function, got error.");
        (sym)(__wc_ptr, __s, __n)
    }
    pub unsafe fn wctomb(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __wc: wchar_t,
    ) -> ::std::os::raw::c_int {
        let sym = self.wctomb.as_ref().expect("Expected function, got error.");
        (sym)(__dst, __wc)
    }
    pub unsafe fn wcstombs(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const wchar_t,
        __n: size_t,
    ) -> size_t {
        let sym = self
            .wcstombs
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn __ctype_get_mb_cur_max(&self) -> size_t {
        let sym = self
            .__ctype_get_mb_cur_max
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn abs(&self, __x: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self.abs.as_ref().expect("Expected function, got error.");
        (sym)(__x)
    }
    pub unsafe fn labs(&self, __x: ::std::os::raw::c_long) -> ::std::os::raw::c_long {
        let sym = self.labs.as_ref().expect("Expected function, got error.");
        (sym)(__x)
    }
    pub unsafe fn llabs(&self, __x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong {
        let sym = self.llabs.as_ref().expect("Expected function, got error.");
        (sym)(__x)
    }
    pub unsafe fn strtof(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32 {
        let sym = self.strtof.as_ref().expect("Expected function, got error.");
        (sym)(__s, __end_ptr)
    }
    pub unsafe fn atof(&self, __s: *const ::std::os::raw::c_char) -> f64 {
        let sym = self.atof.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn rand(&self) -> ::std::os::raw::c_int {
        let sym = self.rand.as_ref().expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn srand(&self, __seed: ::std::os::raw::c_uint) -> () {
        let sym = self.srand.as_ref().expect("Expected function, got error.");
        (sym)(__seed)
    }
    pub unsafe fn random(&self) -> ::std::os::raw::c_long {
        let sym = self.random.as_ref().expect("Expected function, got error.");
        (sym)()
    }
    pub unsafe fn srandom(&self, __seed: ::std::os::raw::c_uint) -> () {
        let sym = self
            .srandom
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__seed)
    }
    pub unsafe fn grantpt(&self, __fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        let sym = self
            .grantpt
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__fd)
    }
    pub unsafe fn strtoll_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_longlong {
        let sym = self
            .strtoll_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base, __l)
    }
    pub unsafe fn strtoull_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_ulonglong {
        let sym = self
            .strtoull_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __base, __l)
    }
    pub unsafe fn strtold_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> u128 {
        let sym = self
            .strtold_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __l)
    }
    pub unsafe fn strtod_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> f64 {
        let sym = self
            .strtod_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __l)
    }
    pub unsafe fn strtof_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        __l: locale_t,
    ) -> f32 {
        let sym = self
            .strtof_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, __l)
    }
    pub unsafe fn strtol_l(
        &self,
        __s: *const ::std::os::raw::c_char,
        __end_ptr: *mut *mut ::std::os::raw::c_char,
        arg1: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_long {
        let sym = self
            .strtol_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __end_ptr, arg1, __l)
    }
    pub unsafe fn strcasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strcasecmp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s1, __s2)
    }
    pub unsafe fn strcasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strcasecmp_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s1, __s2, __l)
    }
    pub unsafe fn strncasecmp(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strncasecmp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s1, __s2, __n)
    }
    pub unsafe fn strncasecmp_l(
        &self,
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strncasecmp_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s1, __s2, __n, __l)
    }
    pub unsafe fn memccpy(
        &self,
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __stop_char: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .memccpy
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __stop_char, __n)
    }
    pub unsafe fn memchr(
        &self,
        __s: *const ::std::os::raw::c_void,
        __ch: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.memchr.as_ref().expect("Expected function, got error.");
        (sym)(__s, __ch, __n)
    }
    pub unsafe fn memrchr(
        &self,
        __s: *const ::std::os::raw::c_void,
        __ch: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .memrchr
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __ch, __n)
    }
    pub unsafe fn memcmp(
        &self,
        __lhs: *const ::std::os::raw::c_void,
        __rhs: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        let sym = self.memcmp.as_ref().expect("Expected function, got error.");
        (sym)(__lhs, __rhs, __n)
    }
    pub unsafe fn memcpy(
        &self,
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.memcpy.as_ref().expect("Expected function, got error.");
        (sym)(arg1, arg2, arg3)
    }
    pub unsafe fn memmove(
        &self,
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self
            .memmove
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn memset(
        &self,
        __dst: *mut ::std::os::raw::c_void,
        __ch: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.memset.as_ref().expect("Expected function, got error.");
        (sym)(__dst, __ch, __n)
    }
    pub unsafe fn memmem(
        &self,
        __haystack: *const ::std::os::raw::c_void,
        __haystack_size: size_t,
        __needle: *const ::std::os::raw::c_void,
        __needle_size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        let sym = self.memmem.as_ref().expect("Expected function, got error.");
        (sym)(__haystack, __haystack_size, __needle, __needle_size)
    }
    pub unsafe fn strchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strchr.as_ref().expect("Expected function, got error.");
        (sym)(__s, __ch)
    }
    pub unsafe fn __strchr_chk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __ch: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .__strchr_chk
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __ch, __n)
    }
    pub unsafe fn strrchr(
        &self,
        __s: *const ::std::os::raw::c_char,
        __ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strrchr
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __ch)
    }
    pub unsafe fn __strrchr_chk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __ch: ::std::os::raw::c_int,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .__strrchr_chk
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __ch, __n)
    }
    pub unsafe fn strlen(&self, __s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong {
        let sym = self.strlen.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn __strlen_chk(&self, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t {
        let sym = self
            .__strlen_chk
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __n)
    }
    pub unsafe fn strcmp(
        &self,
        __lhs: *const ::std::os::raw::c_char,
        __rhs: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self.strcmp.as_ref().expect("Expected function, got error.");
        (sym)(__lhs, __rhs)
    }
    pub unsafe fn stpcpy(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.stpcpy.as_ref().expect("Expected function, got error.");
        (sym)(__dst, __src)
    }
    pub unsafe fn strcpy(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strcpy.as_ref().expect("Expected function, got error.");
        (sym)(__dst, __src)
    }
    pub unsafe fn strcat(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strcat.as_ref().expect("Expected function, got error.");
        (sym)(__dst, __src)
    }
    pub unsafe fn strdup(&self, __s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char {
        let sym = self.strdup.as_ref().expect("Expected function, got error.");
        (sym)(__s)
    }
    pub unsafe fn strstr(
        &self,
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strstr.as_ref().expect("Expected function, got error.");
        (sym)(__haystack, __needle)
    }
    pub unsafe fn strcasestr(
        &self,
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strcasestr
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__haystack, __needle)
    }
    pub unsafe fn strtok(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strtok.as_ref().expect("Expected function, got error.");
        (sym)(__s, __delimiter)
    }
    pub unsafe fn strtok_r(
        &self,
        __s: *mut ::std::os::raw::c_char,
        __delimiter: *const ::std::os::raw::c_char,
        __pos_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strtok_r
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __delimiter, __pos_ptr)
    }
    pub unsafe fn strerror(
        &self,
        __errno_value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strerror
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__errno_value)
    }
    pub unsafe fn strerror_l(
        &self,
        __errno_value: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strerror_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__errno_value, __l)
    }
    pub unsafe fn strerror_r(
        &self,
        __errno_value: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strerror_r
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__errno_value, __buf, __n)
    }
    pub unsafe fn strnlen(&self, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t {
        let sym = self
            .strnlen
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __n)
    }
    pub unsafe fn strncat(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strncat
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strndup(
        &self,
        __s: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strndup
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __n)
    }
    pub unsafe fn strncmp(
        &self,
        __lhs: *const ::std::os::raw::c_char,
        __rhs: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strncmp
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__lhs, __rhs, __n)
    }
    pub unsafe fn stpncpy(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .stpncpy
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strncpy(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strncpy
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strlcat(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strlcat
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strlcpy(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strlcpy
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strcspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strcspn
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __reject)
    }
    pub unsafe fn strpbrk(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strpbrk
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__s, __accept)
    }
    pub unsafe fn strsep(
        &self,
        __s_ptr: *mut *mut ::std::os::raw::c_char,
        __delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char {
        let sym = self.strsep.as_ref().expect("Expected function, got error.");
        (sym)(__s_ptr, __delimiter)
    }
    pub unsafe fn strspn(
        &self,
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong {
        let sym = self.strspn.as_ref().expect("Expected function, got error.");
        (sym)(__s, __accept)
    }
    pub unsafe fn strsignal(&self, __signal: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char {
        let sym = self
            .strsignal
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__signal)
    }
    pub unsafe fn strcoll(
        &self,
        __lhs: *const ::std::os::raw::c_char,
        __rhs: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strcoll
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__lhs, __rhs)
    }
    pub unsafe fn strxfrm(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong {
        let sym = self
            .strxfrm
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n)
    }
    pub unsafe fn strcoll_l(
        &self,
        __lhs: *const ::std::os::raw::c_char,
        __rhs: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int {
        let sym = self
            .strcoll_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__lhs, __rhs, __l)
    }
    pub unsafe fn strxfrm_l(
        &self,
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t {
        let sym = self
            .strxfrm_l
            .as_ref()
            .expect("Expected function, got error.");
        (sym)(__dst, __src, __n, __l)
    }
    pub unsafe fn OrtGetApiBase(&self) -> *const OrtApiBase {
        let sym = self
            .OrtGetApiBase
            .as_ref()
            .expect("Expected function, got error.");
        (sym)()
    }
}
